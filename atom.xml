<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Experiments with Java]]></title>
  <link href="http://elizabetht.github.io/atom.xml" rel="self"/>
  <link href="http://elizabetht.github.io/"/>
  <updated>2014-01-16T11:19:30-06:00</updated>
  <id>http://elizabetht.github.io/</id>
  <author>
    <name><![CDATA[Elizabeth Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Java Web Applications Using Jenkins Continuous Integration]]></title>
    <link href="http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration/"/>
    <updated>2014-01-13T16:50:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration</id>
    <content type="html"><![CDATA[<p>This post will show how to automate the deployment process of a Java Web Application (Student Enrollment Application developed using MYSQL DB with Hibernate ORM in a REST based Jersey2 Spring environment) using Jenkins Continuous Integration &ndash; to build the project, run the unit tests, upload the built artifacts to a Sonatype Snapshot repository, run the Cobertura Code Coverage reports and deploy the application to the Amazon EC2. The details of the actual application are explained in the earlier post given by the link <a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>.</p>

<h2>1. Install Jenkins as a Windows Service</h2>

<p>Navigate to jenkins-ci.org website using an Internet browser and download the Windows native package (the link is underlined for easy identification) as shown from the right side pane of the Download Jenkins tab.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-installation.png" title="Jenkins Installation Package" alt="Jenkins Installation package" /></p>

<p>Once the download is complete, uncompress the zip file and click on the jenkins-1.xxx.msi file. Proceed through the configuration steps to install the Jenkins as a Windows service.</p>

<h2>2. Modify Default Jenkins Port</h2>

<p>By default Jenkins runs on the port 8080. In order to avoid conflict with other applications, the default port can be modified by editing the jenkins.xml found under C:\Program Files (x86)\Jenkins location. As shown below, modify the httpPort to 8082.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;service&gt;
</span><span class='line'>  &lt;id&gt;jenkins&lt;/id&gt;
</span><span class='line'>  &lt;name&gt;Jenkins&lt;/name&gt;
</span><span class='line'>  &lt;description&gt;This service runs Jenkins continuous integration system.&lt;/description&gt;
</span><span class='line'>  &lt;env name="JENKINS_HOME" value="%BASE%"/&gt;
</span><span class='line'>  &lt;!--
</span><span class='line'>    if you'd like to run Jenkins with a specific version of Java, specify a full path to java.exe.
</span><span class='line'>    The following value assumes that you have java in your PATH.
</span><span class='line'>  --&gt;
</span><span class='line'>  &lt;executable&gt;%BASE%\jre\bin\java&lt;/executable&gt;
</span><span class='line'>  &lt;arguments&gt;-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar "%BASE%\jenkins.war" --httpPort=8082&lt;/arguments&gt;
</span><span class='line'>  &lt;!--
</span><span class='line'>    interactive flag causes the empty black Java window to be displayed.
</span><span class='line'>    I'm still debugging this.
</span><span class='line'>  &lt;interactive /&gt;
</span><span class='line'>  --&gt;
</span><span class='line'>  &lt;logmode&gt;rotate&lt;/logmode&gt;
</span><span class='line'>
</span><span class='line'>  &lt;onfailure action="restart" /&gt;
</span><span class='line'>&lt;/service&gt;</span></code></pre></td></tr></table></div></figure>


<p>Once the modification is saved in jenkins.xml file, restart the Jenkins service from the Windows Task Manager->Services and right clicking on the Jenkins service and choose Stop Service to stop the service as shown below.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-stop.png" title="Jenkins Stop Service" alt="Jenkins Stop Service" /></p>

<p>Once the status of the service changes to stopped, restart the service by right clicking on the Jenkins service and choose Start Service to start the service again.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-restart.png" title="Jenkins Restart Service" alt="Jenkins Restart Service" /></p>

<p>Navigate to localhost:8082 to verify if the Jenkins restart was successful as shown below &ndash; Jenkins Dashboard will be displayed. Note that it takes a while before the Jenkins service becomes available.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-dashboard.png" title="Jenkins Dashboard" alt="Jenkins Dashboard" /></p>

<h2>3. Install Plugins</h2>

<p>On the Jenkins Dashboard, navigate to Manage Jenkins &ndash;> Manage Plugins as shown in the snapshot below.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-manageplugins.png" title="Jenkins Manage Plugins" alt="Jenkins Manage Plugins" /></p>

<p>Install the following plugins and restart Jenkins for the changes to take effect.</p>

<ul>
<li>GitHub Plugin (for integrating Github with Jenkins)</li>
<li>Jenkins Cobertura Plugin (for Cobertura support)</li>
<li>Deploy to Container Plugin (for deploying the WAR to the Tomcat Container on EC2 instance)</li>
<li>Jenkins Artifactory Plugin (for deploying the built Maven artifacts to the Snapshot repository)</li>
</ul>


<h2>4. Configure System</h2>

<p>On the Jenkins Dashboard, navigate to Manage Jenkins &ndash;> Configure System as shown in the snapshot below.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-configuresystem.png" title="Jenkins Configure System" alt="Jenkins Configure System" /></p>

<p>Navigate to the JDK section and click on &ldquo;Add JDK&rdquo; to add the JDK installation as shown in the snapshot below. Specify a JDK Name, choose the JDK Version to install and follow the on-screen instructions to save the Oracle Login credentials. Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-java.png" title="Jenkins Java Installation" alt="Jenkins Java Installation" /></p>

<p>Next, proceed to the Maven section and click on &ldquo;Add Maven&rdquo; to add the Maven installation as shown in the snapshot below. Specify Maven Name, choose the Maven Version to install and Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-maven.png" title="Jenkins Maven Installation" alt="Jenkins Maven Installation" /></p>

<p>Proceed to the Git plugin section and enter the values for Github Username and Email Address as credentials as shown below. Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-git.png" title="Jenkins Gitplugin Credentials" alt="Jenkins Gitplugin Credentials" /></p>

<p>Proceed to the Artifactory section and click on &ldquo;Add&rdquo; to add the information about the artifactory servers. Specify the URL for the snapshot repository and provide the deployer credentials created from the Artifactory server website as shown below. Click on &ldquo;Test Connection&rdquo; to test if the connection parameters are good to save and Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-artifactory.png" title="Jenkins Artifactory Servers Configuration" alt="Jenkins Artifactory Servers Configuration" /></p>

<p>Next, proceed to the Email Notification section and enter the SMTP Server details as shown below. Click on the Advanced button to add the further details required and Save the changes. Click on &ldquo;Test configuration by sending test e-mail&rdquo;, enter the test e-mail recipient and click on &ldquo;Test configuration&rdquo; to see if the email is successfully sent.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-email.png" title="Jenkins Email Notification" alt="Jenkins Email Notification" /></p>

<h2>5. Create a New Jenkins Job</h2>

<p>From the Jenkins Dashboard, click on &ldquo;New Job&rdquo; to create a new job. Enter a name for the job and choose &ldquo;Build a maven2/3 project&rdquo; as option and click on OK as shown below.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-newjob.png" title="Jenkins New Job" alt="Jenkins New Job" /></p>

<p>From the New Job Configuration screen, proceed to the Source Code Management section and specify the Git Repository URL for the project as shown below. Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-sourcecodemgmt.png" title="Jenkins Source Code Management" alt="Jenkins Source Code Management" /></p>

<p>Next, from the Build Triggers section, select the options desired as shown below and Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-buildtriggers.png" title="Jenkins Build Triggers" alt="Jenkins Build Triggers" /></p>

<p>Proceed to the Build section, enter the maven goals for building a snapshot as shown below and Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-build.png" title="Jenkins Build" alt="Jenkins Build" /></p>

<p>Proceed to the Build Settings section. Select the option for Email Notification and enter the values for the email recipients as shown below. Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-emailnotifications.png" title="Jenkins Email Notifications" alt="Jenkins Email Notifications" /></p>

<p>Under the Post-build Actions, click on &ldquo;Add post-build action&rdquo; button and select &ldquo;Deploy war/ear to a container&rdquo;. In the Amazon EC2, a Tomcat Manager (manager as username) instance has to be configured with roles manager-gui and manager-script to allow the remote deployment of the WAR/EAR to the Tomcat Container. The configuration steps can be found in the link <a href="https://help.ubuntu.com/13.04/serverguide/tomcat.html">https://help.ubuntu.com/13.04/serverguide/tomcat.html</a> under the section of &ldquo;Tomcat administration webapps&rdquo;</p>

<p>Once the Tomcat Manager webapp configuration is complete in the Amazon EC2 instance, enter the details necessary for the deployment as shown below. Save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-deploy.png" title="Jenkins Deployment" alt="Jenkins Deployment" /></p>

<p>Similarly, from the Post-build Actions, click on &ldquo;Add post-build action&rdquo; button and select &ldquo;Publish Cobertura Coverage Report&rdquo;. Enter the Cobertura XML Report Pattern as shown below and save the changes.</p>

<p><img src="http://elizabetht.github.io/images/jenkins-cobertura.png" title="Jenkins Cobertura Coverage Report" alt="Jenkins Cobertura Coverage Report" /></p>

<h2>6. Configure settings.xml</h2>

<p>In order to upload the built Maven artifacts to the artifactory server, configure the Jenkins settings.xml found in C:\Program Files (x86)\Jenkins\tools\hudson.tasks.Maven_MavenInstallation\Maven_3.1\conf folder with the same parameters as found in the default settings.xml (usually found under C:\Program Files\Apache Software Foundation\apache-maven-3.1.0\conf for a Windows machine) of the Maven installation on the system.</p>

<p>Typically, the server, mirror and profile section needs to be configured in the settings.xml for Jenkins matching with the details of the Artifactory server.</p>

<h2>7. Update pom.xml</h2>

<p>The pom.xml file for the project needs to be configured with the following plugins under the build section for the deployment to snapshot repository and for running the Cobertura Coverage report.</p>

<ul>
<li>maven-compiler plugin</li>
<li>maven-deploy-plugin</li>
<li>cobertura-maven-plugin</li>
</ul>


<p>Also add parent, scm and developer section to comply with the requirements put forth by the Artifactory server management as shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;parent&gt;
</span><span class='line'>      &lt;groupId&gt;org.sonatype.oss&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;oss-parent&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;7&lt;/version&gt;
</span><span class='line'>  &lt;/parent&gt;
</span><span class='line'>
</span><span class='line'>  &lt;scm&gt;
</span><span class='line'>      &lt;connection&gt;scm:git:git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/connection&gt;
</span><span class='line'>      &lt;developerConnection&gt;scm:git:git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/developerConnection&gt;
</span><span class='line'>      &lt;url&gt;git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/url&gt;
</span><span class='line'>      &lt;tag&gt;StudentEnrollmentWithREST-1.3&lt;/tag&gt;
</span><span class='line'>  &lt;/scm&gt;
</span><span class='line'>  &lt;developers&gt;
</span><span class='line'>      &lt;developer&gt;
</span><span class='line'>          &lt;id&gt;elizabetht&lt;/id&gt;
</span><span class='line'>          &lt;name&gt;Elizabeth Thomas&lt;/name&gt;
</span><span class='line'>          &lt;email&gt;email2eliza@gmail.com&lt;/email&gt;
</span><span class='line'>      &lt;/developer&gt;
</span><span class='line'>  &lt;/developers&gt;
</span><span class='line'>
</span><span class='line'>  &lt;build&gt;
</span><span class='line'>      &lt;finalName&gt;StudentEnrollmentWithREST&lt;/finalName&gt;
</span><span class='line'>      &lt;plugins&gt;
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.5.1&lt;/version&gt;
</span><span class='line'>              &lt;inherited&gt;true&lt;/inherited&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;source&gt;1.6&lt;/source&gt;
</span><span class='line'>                  &lt;target&gt;1.6&lt;/target&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.8.1&lt;/version&gt;
</span><span class='line'>              &lt;executions&gt;
</span><span class='line'>                  &lt;execution&gt;
</span><span class='line'>                      &lt;id&gt;default-deploy&lt;/id&gt;
</span><span class='line'>                      &lt;phase&gt;deploy&lt;/phase&gt;
</span><span class='line'>                      &lt;goals&gt;
</span><span class='line'>                          &lt;goal&gt;deploy&lt;/goal&gt;
</span><span class='line'>                      &lt;/goals&gt;
</span><span class='line'>                  &lt;/execution&gt;
</span><span class='line'>              &lt;/executions&gt;
</span><span class='line'>          &lt;/plugin&gt;                 
</span><span class='line'>
</span><span class='line'>          &lt;plugin&gt;
</span><span class='line'>              &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
</span><span class='line'>              &lt;version&gt;2.6&lt;/version&gt;
</span><span class='line'>              &lt;configuration&gt;
</span><span class='line'>                  &lt;formats&gt;
</span><span class='line'>                      &lt;format&gt;html&lt;/format&gt;
</span><span class='line'>                      &lt;format&gt;xml&lt;/format&gt;
</span><span class='line'>                  &lt;/formats&gt;
</span><span class='line'>              &lt;/configuration&gt;
</span><span class='line'>              &lt;executions&gt;
</span><span class='line'>                  &lt;execution&gt;
</span><span class='line'>                      &lt;phase&gt;package&lt;/phase&gt;
</span><span class='line'>                      &lt;goals&gt;
</span><span class='line'>                          &lt;goal&gt;cobertura&lt;/goal&gt;
</span><span class='line'>                      &lt;/goals&gt;
</span><span class='line'>                  &lt;/execution&gt;
</span><span class='line'>              &lt;/executions&gt;
</span><span class='line'>          &lt;/plugin&gt;
</span><span class='line'>      &lt;/plugins&gt;
</span><span class='line'>  &lt;/build&gt;</span></code></pre></td></tr></table></div></figure>


<h2>8. Build Now</h2>

<p>Once the above configuration steps are complete, click on &ldquo;Build Now&rdquo; under the Jenkins &ndash;> Upload REST Snapshot Artifacts (or the respective Job name) to build the project based on the configuration.</p>

<p>The console output has the detailed logs of what steps were initiated by the configuration and the outcome of the entire build.</p>

<p>The timestamp of the WAR deployed to Amazon EC2 instance can be checked to see if the deployment happened. In the same way, the snapshot repository can be checked to see if the upload of the artifacts has happened.</p>

<p>Thus the entire process of building the project along with unit tests whenever a SCM change is triggered or under another condition, running code coverage reports, uploading the artifacts built to the snapshot artifactory repository, deploying the WAR to the remote server container and triggering emails to the recipients can be automated with a click of a button through Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Jersey2 REST Client Using Spring With JUnit and JMock]]></title>
    <link href="http://elizabetht.github.io/blog/2013/12/23/jersey2-rest-client-with-junit-and-jmock/"/>
    <updated>2013-12-23T12:10:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/12/23/jersey2-rest-client-with-junit-and-jmock</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Jersey2 REST Client in a Spring environment and test the same using JUnit and JMock frameworks. The details of the actual application are explained in the earlier post given by the link <a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>.</p>

<h2>1. Update pom.xml</h2>

<p>To make the Maven Java Web Application project (<a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>) support the JUnit testing framework, add the following dependency to the existing pom.xml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>  &lt;groupId&gt;org.jmock&lt;/groupId&gt;
</span><span class='line'>  &lt;artifactId&gt;jmock-junit4&lt;/artifactId&gt;
</span><span class='line'>  &lt;version&gt;2.6.0&lt;/version&gt;
</span><span class='line'>&lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<h2>2. Create packages for Client tier classes</h2>

<p>Create package for the Jersey Client classes under the src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/jersey-client-package.png" title="Jersey REST Client Package Layout" alt="Jersey REST Client Package Layout" /></p>

<h2>3. Create classes for Client tier</h2>

<p>Create an interface class named StudentClientInterface.java inside the package com.github.elizabetht.client to support the client operations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentClientInterface {
</span><span class='line'>
</span><span class='line'>  public Response getSignup();
</span><span class='line'>
</span><span class='line'>  public Response postSignup(String userName, String password,
</span><span class='line'>          String firstName, String lastName, String dateOfBirth,
</span><span class='line'>          String emailAddress) throws Exception;
</span><span class='line'>
</span><span class='line'>  public Response getLogin();
</span><span class='line'>
</span><span class='line'>  public Response postLogin(String userName, String password);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a client tier implementation class (a POJO indeed) named StudentClient.java inside the package com.github.elizabetht.client. This is where the client logic goes &ndash; either to access the GET/POST methods in the StudentResource.java class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentClient implements StudentClientInterface {
</span><span class='line'>  private WebTarget target;
</span><span class='line'>
</span><span class='line'>  public StudentClient(WebTarget target) {
</span><span class='line'>      this.target = target;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Response getSignup() {       
</span><span class='line'>      Response response = target.path("signup").request().get(Response.class);
</span><span class='line'>      return response;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Response postSignup(String userName, String password,
</span><span class='line'>          String firstName, String lastName, String dateOfBirth,
</span><span class='line'>          String emailAddress) throws Exception {
</span><span class='line'>      
</span><span class='line'>      Form form = new Form().param("userName", userName)
</span><span class='line'>              .param("password", password).param("firstName", firstName)
</span><span class='line'>              .param("lastName", lastName).param("dateOfBirth", dateOfBirth)
</span><span class='line'>              .param("emailAddress", emailAddress);
</span><span class='line'>      Response response = target.path("signup").request()
</span><span class='line'>              .post(Entity.form(form));
</span><span class='line'>
</span><span class='line'>      if (response.getStatus() == Status.INTERNAL_SERVER_ERROR
</span><span class='line'>              .getStatusCode()) {
</span><span class='line'>          throw new Exception();
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      if (response.getStatus() != Status.OK.getStatusCode()) {
</span><span class='line'>          throw new RuntimeException();
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return response;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Response getLogin() {
</span><span class='line'>      Response response = target.path("login").request().get(Response.class);
</span><span class='line'>
</span><span class='line'>      return response;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Response postLogin(String userName, String password) {
</span><span class='line'>      Form form = new Form().param("userName", userName).param("password",
</span><span class='line'>              password);
</span><span class='line'>
</span><span class='line'>      Response response = target.path("login").request()
</span><span class='line'>              .post(Entity.form(form));
</span><span class='line'>
</span><span class='line'>      if (response.getStatus() != Status.OK.getStatusCode()) {
</span><span class='line'>          throw new RuntimeException();
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      return response;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>4. Create packages for Client Test tier classes</h2>

<p>Create package for the Client Test classes by right-clicking on the StudentClient.java class and choosing &ldquo;New->JUnit Test Case&rdquo; option. Specify the source folder as StudentEnrollmentWithREST/src/test/java folder (create the src/test/java folder if the folder does not exist) and specify the name for the test class.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/jersey-client-test-package.png" title="Jersey REST Client Test Package Layout" alt="Jersey REST Client Test Package Layout" /></p>

<h2>5. Extract Interfaces for Model and Resource tier classes</h2>

<p>In order to support the use of JMock mocking framework alongside JUnit test cases, extract the interfaces out of the Model(Student.java) and Resource (StudentResource.java) tier classes. This is necessary in order to mock the objects.</p>

<p>Extracting interfaces can be done by right-clicking on the class file and choosing &ldquo;Refactor->Extract Interface&rdquo; option.</p>

<p>The StudentInterface.java (in src/main/java/com.github.elizabetht.model package) after the extraction looks as below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentInterface {
</span><span class='line'>
</span><span class='line'>  public Long getId();
</span><span class='line'>
</span><span class='line'>  public void setId(Long id);
</span><span class='line'>
</span><span class='line'>  public String getUserName();
</span><span class='line'>
</span><span class='line'>  public void setUserName(String userName);
</span><span class='line'>
</span><span class='line'>  public String getFirstName();
</span><span class='line'>
</span><span class='line'>  public void setFirstName(String firstName);
</span><span class='line'>
</span><span class='line'>  public String getLastName();
</span><span class='line'>
</span><span class='line'>  public void setLastName(String lastName);
</span><span class='line'>
</span><span class='line'>  public String getPassword();
</span><span class='line'>
</span><span class='line'>  public void setPassword(String password);
</span><span class='line'>
</span><span class='line'>  public String getEmailAddress();
</span><span class='line'>
</span><span class='line'>  public void setEmailAddress(String emailAddress);
</span><span class='line'>
</span><span class='line'>  public Date getDateOfBirth();
</span><span class='line'>
</span><span class='line'>  public void setDateOfBirth(Date dateOfBirth);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Similarly, the StudentResourceInterface.java (in src/main/java/com.github.elizabetht.resource package) looks as below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentResourceInterface {
</span><span class='line'>
</span><span class='line'>  public Response signup();
</span><span class='line'>
</span><span class='line'>  public Response signup(String userName, String password, String firstName,
</span><span class='line'>          String lastName, String dateOfBirth, String emailAddress)
</span><span class='line'>          throws ParseException;
</span><span class='line'>
</span><span class='line'>  public Response login();
</span><span class='line'>
</span><span class='line'>  public Response login(String userName, String password);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>6. Create Unit Test cases for StudentClient class</h2>

<p>As a part of unit testing, each of the unit must be testable individually. While in reality, each unit would depend on other modules. This is where JMock comes into picture &ndash; to help to test a unit individually by mocking the dependencies.</p>

<p>@Before annotation helps to define the environment that needs to be setup before running each test case. In this example, the context and mock objects are setup using the @Before annotation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentClientUnitTest {
</span><span class='line'>  private Mockery context;
</span><span class='line'>  private StudentClient studentClient;
</span><span class='line'>  private WebTarget target;
</span><span class='line'>  private Builder builder;
</span><span class='line'>
</span><span class='line'>  @Before
</span><span class='line'>  public void beforeEachTest() {
</span><span class='line'>      context = new Mockery();
</span><span class='line'>      studentClient = new StudentClient(
</span><span class='line'>              ClientBuilder
</span><span class='line'>                      .newClient()
</span><span class='line'>                      .target("http://localhost:8080/StudentEnrollmentWithREST/webapi/studentResource/"));
</span><span class='line'>      target = context.mock(WebTarget.class);
</span><span class='line'>      builder = context.mock(Builder.class);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void getSignupTest() {
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.ok(new Viewable("/signup")).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).get(Response.class);
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.getSignup();
</span><span class='line'>      assertEquals(response.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postSignupTest() throws Exception {
</span><span class='line'>      String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      String firstName = "jersey";
</span><span class='line'>      String lastName = "jersey";
</span><span class='line'>      String dateOfBirth = "12-21-2013";
</span><span class='line'>      String emailAddress = "jersey@gmail.com";
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.ok(new Viewable("/success")).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postSignup(userName, password, firstName, lastName,
</span><span class='line'>              dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test(expected = Exception.class)
</span><span class='line'>  public void postSignupInvalidDateFormatTest() throws Exception {
</span><span class='line'>      String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      String firstName = "jersey";
</span><span class='line'>      String lastName = "jersey";
</span><span class='line'>      String dateOfBirth = "12/21/2013";
</span><span class='line'>      String emailAddress = "jersey@gmail.com";
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.status(Status.PRECONDITION_FAILED)
</span><span class='line'>              .build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postSignup(userName, password, firstName, lastName,
</span><span class='line'>              dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test(expected = Exception.class)
</span><span class='line'>  public void postSignupBadRequestTest() throws Exception {
</span><span class='line'>      String userName = null;
</span><span class='line'>      String password = null;
</span><span class='line'>      String firstName = null;
</span><span class='line'>      String lastName = null;
</span><span class='line'>      String dateOfBirth = null;
</span><span class='line'>      String emailAddress = null;
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.status(Status.PRECONDITION_FAILED)
</span><span class='line'>              .build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postSignup(userName, password, firstName, lastName,
</span><span class='line'>              dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test(expected = RuntimeException.class)
</span><span class='line'>  public void postSignupExistingUserTest() throws Exception {
</span><span class='line'>      String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      String firstName = "jersey";
</span><span class='line'>      String lastName = "jersey";
</span><span class='line'>      String dateOfBirth = "12/21/2013";
</span><span class='line'>      String emailAddress = "jersey@gmail.com";
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.status(Status.BAD_REQUEST).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postSignup(userName, password, firstName, lastName,
</span><span class='line'>              dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(), Status.BAD_REQUEST.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void getLoginTest() {
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.ok(new Viewable("/login")).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).get(Response.class);
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.getLogin();
</span><span class='line'>      assertEquals(response.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postLoginTest() {
</span><span class='line'>      String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.ok(new Viewable("/success")).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postLogin(userName, password);
</span><span class='line'>      assertEquals(response.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @Test(expected=RuntimeException.class)
</span><span class='line'>  public void postLoginInvalidTest() {
</span><span class='line'>      String userName = "jersey";
</span><span class='line'>      String password = "jersey123";
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.status(Status.BAD_REQUEST).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postLogin(userName, password);
</span><span class='line'>      assertEquals(response.getStatus(), Status.BAD_REQUEST.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @Test(expected=RuntimeException.class)
</span><span class='line'>  public void postLoginBadRequestTest() {
</span><span class='line'>      String userName = null;
</span><span class='line'>      String password = null;
</span><span class='line'>      studentClient = new StudentClient(target);
</span><span class='line'>
</span><span class='line'>      final Response response = Response.status(Status.PRECONDITION_FAILED).build();
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(target).path(with(any(String.class)));
</span><span class='line'>              will(returnValue(target));
</span><span class='line'>              oneOf(target).request();
</span><span class='line'>              will(returnValue(builder));
</span><span class='line'>              oneOf(builder).post(with(any(Entity.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentClient.postLogin(userName, password);
</span><span class='line'>      assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>7. Create Unit Test cases for StudentResource class</h2>

<p>In similar lines, create unit test cases for StudentResource class by mocking the external dependencies which the class depends on for its operation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentResourceUnitTest {
</span><span class='line'>  private Mockery context;
</span><span class='line'>  private StudentService studentService;
</span><span class='line'>  private StudentResourceInterface studentResourceInterface;
</span><span class='line'>
</span><span class='line'>  @Before
</span><span class='line'>  public void beforeEachTest() throws Exception {
</span><span class='line'>      context = new Mockery();
</span><span class='line'>      studentService = context.mock(StudentService.class);
</span><span class='line'>      studentResourceInterface = new StudentResource();
</span><span class='line'>
</span><span class='line'>      Field field = studentResourceInterface.getClass().getDeclaredField(
</span><span class='line'>              "studentService");
</span><span class='line'>      field.setAccessible(true);
</span><span class='line'>      field.set(studentResourceInterface, studentService);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postSignupResourceTest() throws ParseException {
</span><span class='line'>      final String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      String firstName = "jersey";
</span><span class='line'>      String lastName = "jersey";
</span><span class='line'>      String dateOfBirth = "12/21/2013";
</span><span class='line'>      String emailAddress = "jersey@gmail.com";
</span><span class='line'>      final StudentInterface student = context.mock(StudentInterface.class);
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByUserName(userName);
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>              oneOf(studentService).save(with(any(StudentInterface.class)));
</span><span class='line'>              will(returnValue(student));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postSignupResourceForExistingUserTest() throws ParseException {
</span><span class='line'>      final String userName = "jersey";
</span><span class='line'>      String password = "jersey";
</span><span class='line'>      String firstName = "jersey";
</span><span class='line'>      String lastName = "jersey";
</span><span class='line'>      String dateOfBirth = "12/21/2013";
</span><span class='line'>      String emailAddress = "jersey@gmail.com";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByUserName(userName);
</span><span class='line'>              will(returnValue(true));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postSignupResourceForBadRequestTest() throws ParseException {
</span><span class='line'>      String userName = null;
</span><span class='line'>      String password = null;
</span><span class='line'>      String firstName = null;
</span><span class='line'>      String lastName = null;
</span><span class='line'>      String dateOfBirth = null;
</span><span class='line'>      String emailAddress = null;
</span><span class='line'>      final StudentResourceInterface studentResourceInterface = context
</span><span class='line'>              .mock(StudentResourceInterface.class);
</span><span class='line'>      final Response response = Response.status(Status.PRECONDITION_FAILED)
</span><span class='line'>              .build();
</span><span class='line'>      final Response response1 = Response.ok().entity(new Viewable("/login"))
</span><span class='line'>              .build();
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      userName = "jersey";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      password = "jersey";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      firstName = "jersey";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>
</span><span class='line'>      lastName = "jersey";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      dateOfBirth = "12/20/2013";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface)
</span><span class='line'>                      .signup(with(aNonNull(String.class)),
</span><span class='line'>                              with(aNonNull(String.class)),
</span><span class='line'>                              with(aNonNull(String.class)),
</span><span class='line'>                              with(aNonNull(String.class)),
</span><span class='line'>                              with(aNonNull(String.class)),
</span><span class='line'>                              with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      emailAddress = "jersey@gmail.com";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).signup(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)));
</span><span class='line'>              will(returnValue(response1));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.signup(userName, password, firstName,
</span><span class='line'>              lastName, dateOfBirth, emailAddress);
</span><span class='line'>      assertEquals(response1.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postLoginResourceTest() throws ParseException {
</span><span class='line'>      final String userName = "jersey";
</span><span class='line'>      final String password = "jersey";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(userName, password);
</span><span class='line'>              will(returnValue(true));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName, password);
</span><span class='line'>
</span><span class='line'>      final String password1 = "jersey123";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(userName, password1);
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName, password1);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void postLoginResourceForBadRequestTest() throws ParseException {
</span><span class='line'>      final String userName = null;
</span><span class='line'>      final String password = null;
</span><span class='line'>      final StudentResourceInterface studentResourceInterface = context
</span><span class='line'>              .mock(StudentResourceInterface.class);
</span><span class='line'>      final Response response = Response.status(Status.PRECONDITION_FAILED)
</span><span class='line'>              .build();
</span><span class='line'>      final Response response1 = Response.ok().entity(new Viewable("/login"))
</span><span class='line'>              .build();
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).login(
</span><span class='line'>                      with(aNull(String.class)), with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName, password);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      final String userName1 = "jersey";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface)
</span><span class='line'>                      .login(with(aNonNull(String.class)),
</span><span class='line'>                              with(aNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName1, password);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      final String password1 = "jersey";
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface)
</span><span class='line'>                      .login(with(aNull(String.class)),
</span><span class='line'>                              with(aNonNull(String.class)));
</span><span class='line'>              will(returnValue(response));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName, password1);
</span><span class='line'>      assertEquals(response.getStatus(),
</span><span class='line'>              Status.PRECONDITION_FAILED.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentResourceInterface).login(
</span><span class='line'>                      with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)));
</span><span class='line'>              will(returnValue(response1));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentResourceInterface.login(userName1, password1);
</span><span class='line'>      assertEquals(response1.getStatus(), Status.OK.getStatusCode());
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>8. Create Unit Test cases for StudentService class</h2>

<p>Create unit test cases for StudentService class by mocking the external dependencies which the class depends on for its operation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentServiceUnitTest {
</span><span class='line'>  private Mockery context;
</span><span class='line'>  private StudentRepository studentRepository;
</span><span class='line'>  private StudentService studentService;
</span><span class='line'>
</span><span class='line'>  @Before
</span><span class='line'>  public void beforeEachTest() throws Exception {
</span><span class='line'>      context = new Mockery();
</span><span class='line'>      studentRepository = context.mock(StudentRepository.class);
</span><span class='line'>      studentService = new StudentServiceImpl();
</span><span class='line'>
</span><span class='line'>      Field field = studentService.getClass().getDeclaredField(
</span><span class='line'>              "studentRepository");
</span><span class='line'>      field.setAccessible(true);
</span><span class='line'>      field.set(studentService, studentRepository);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void findByLoginTest() {
</span><span class='line'>      final String userName = "j2eee";
</span><span class='line'>      final String password = "j2ee";
</span><span class='line'>      final StudentInterface studentInterface = null;
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository).findByUserName(userName);
</span><span class='line'>              will(returnValue(studentInterface));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName, password);
</span><span class='line'>      assertNull(studentInterface);
</span><span class='line'>
</span><span class='line'>      final String userName1 = "j2ee";
</span><span class='line'>      final StudentInterface studentInterface1 = context
</span><span class='line'>              .mock(StudentInterface.class);
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository).findByUserName(userName1);
</span><span class='line'>              will(returnValue(studentInterface1));
</span><span class='line'>              oneOf(studentInterface1).getPassword();
</span><span class='line'>              will(returnValue(password));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName1, password);
</span><span class='line'>      assertNotNull(studentInterface1);
</span><span class='line'>      assertEquals("j2ee", password);
</span><span class='line'>
</span><span class='line'>      final String password1 = "j2eee";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository).findByUserName(userName1);
</span><span class='line'>              will(returnValue(studentInterface1));
</span><span class='line'>              oneOf(studentInterface1).getPassword();
</span><span class='line'>              will(returnValue(password1));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName1, password1);
</span><span class='line'>      assertNotNull(studentInterface1);
</span><span class='line'>      assertNotEquals("j2ee", password1);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void findByLoginWithNullParametersTest() {
</span><span class='line'>      final String userName = null;
</span><span class='line'>      final String password = null;
</span><span class='line'>      studentService = context.mock(StudentService.class);
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(with(aNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)));
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName, password);
</span><span class='line'>
</span><span class='line'>      final String userName1 = "j2ee";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(with(aNonNull(String.class)),
</span><span class='line'>                      with(aNull(String.class)));
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName1, password);
</span><span class='line'>
</span><span class='line'>      final String password1 = "j2eee";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(with(aNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)));
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName, password1);
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentService).findByLogin(with(aNonNull(String.class)),
</span><span class='line'>                      with(aNonNull(String.class)));
</span><span class='line'>              will(returnValue(false));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName1, password1);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void findByEmptyLoginTest() {
</span><span class='line'>      final String userName = "";
</span><span class='line'>      final String password = "";
</span><span class='line'>      final StudentInterface studentInterface = null;
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository).findByUserName(userName);
</span><span class='line'>              will(returnValue(studentInterface));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByLogin(userName, password);
</span><span class='line'>      assertNull(studentInterface);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void findByUserNameTest() {
</span><span class='line'>      final String userName = "j2ee";
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository)
</span><span class='line'>                      .findByUserName(with(any(String.class)));
</span><span class='line'>              will(returnValue(with(any(StudentInterface.class))));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByUserName(userName);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Test
</span><span class='line'>  public void findByBadUserNameTest() {
</span><span class='line'>      final String userName = "j2eee";
</span><span class='line'>      final StudentInterface studentInterface = null;
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository)
</span><span class='line'>                      .findByUserName(with(any(String.class)));
</span><span class='line'>              will(returnValue(studentInterface));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByUserName(userName);
</span><span class='line'>      assertNull(studentInterface);
</span><span class='line'>
</span><span class='line'>      final String userName1 = "j2ee";
</span><span class='line'>      final StudentInterface studentInterface1 = context
</span><span class='line'>              .mock(StudentInterface.class);
</span><span class='line'>
</span><span class='line'>      context.checking(new Expectations() {
</span><span class='line'>          {
</span><span class='line'>              oneOf(studentRepository).findByUserName(userName1);
</span><span class='line'>              will(returnValue(studentInterface1));
</span><span class='line'>          }
</span><span class='line'>      });
</span><span class='line'>      studentService.findByUserName(userName1);
</span><span class='line'>      assertNotNull(studentInterface1);
</span><span class='line'>
</span><span class='line'>      context.assertIsSatisfied();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>9. Running Test cases</h2>

<p>Any of the test case or test class can be run by right clicking on the name of the test case or test class and choosing &ldquo;Run As->JUnit test case&rdquo;. Each of the test case developed should be tested to give a success output (indicated by the green bar in the JUnit output)</p>

<h2>10. Code Coverage</h2>

<p>Using tools like EclEmma, code coverage for the project can be measured. To install EclEmma, choose &ldquo;Help->Eclipse Marketplace&rdquo; and search for EclEmma in the search toolbar. Install the tool using the steps on-screen.</p>

<p>Once the tool is installed, the code coverage for the project can be measured by choosing &ldquo;Coverage As->JUnit test case&rdquo; from the right click options on the project.</p>

<p>Achieving a code coverage of about or above 80% is normally preferred according to industrial standards. Not only writing unit test cases for existing code, but developing test scenarios for which code is not in place is an important step in Test Driven Development (TDD). By iteratively following the TDD approach, the stability of the code could be significantly improved.</p>

<h2>11. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST.git">https://github.com/elizabetht/StudentEnrollmentWithREST.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.2">https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using Jersey2 REST With Spring]]></title>
    <link href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/"/>
    <updated>2013-12-13T10:45:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Hibernate ORM in a REST based Jersey2 Spring environment. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project using Maven Template</h2>

<p>To begin with, from the command line, create a Java Maven project with the template of jersey-quickstart-webapp by providing appropriate values for GroupId, Artifact Id, Version and Package for the project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=2.4.1</span></code></pre></td></tr></table></div></figure>


<p>Import the project into the IDE using File->Import->Existing Maven Projects, select Root Directory where the Project is created (ideally the name of the Project or ArtifactId) and click on Finish. The sample web application directory structure is shown below with a standard deployment descriptor web.xml and Maven pom.xml</p>

<p><img src="http://elizabetht.github.io/images/jersey-layout.png" title="Jersey REST Spring Maven Project Layout" alt="Jersey REST Spring Maven Project Layout" /></p>

<h2>2. Update pom.xml</h2>

<p>To make the above Maven Java Web Application project support the Hibernate ORM and Jersey Container in Spring framework, add the following dependencies to the existing pom.xml</p>

<ul>
<li>jstl and servlet-api (for Javax Servlet Support)</li>
<li>jersey-container-servlet, jersey-media-moxy, jersey-spring3, jersey-server and jersey-mvc-jsp (for Jersey Support)</li>
<li>spring-core, spring-context, spring-web and spring-webmvc(for Spring Support)</li>
<li>junit (for JUnit Support)</li>
<li>commons-lang3 (for standard Java library support)</li>
<li>mysql-connector-java (for MYSQL support)</li>
<li>spring-jdbc (for data access with JDBC Spring)</li>
<li>spring-orm (for ORM data access with Spring)</li>
<li>spring-data-jpa (for JPA support)</li>
<li>hibernate-validator and hibernate-entitymanager (for Hibernate Support)</li>
<li>jta (for transaction support)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependencies&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;2.5&lt;/version&gt;
</span><span class='line'>      &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.2&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;
</span><span class='line'>      &lt;!-- &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt; --&gt;
</span><span class='line'>      &lt;!-- use the above artifactId if you need servlet 2.x compatibility --&gt;
</span><span class='line'>      &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${jersey.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;!-- uncomment this to get JSON support --&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jersey-media-moxy&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${jersey.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jersey-spring3&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${jersey.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${jersey.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jersey-mvc-jsp&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${jersey.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;${spring.version}&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;junit&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;junit&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;4.11&lt;/version&gt;
</span><span class='line'>      &lt;scope&gt;test&lt;/scope&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.1&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;mysql&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;5.1.21&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;4.2.0.Final&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;4.1.9.Final&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jta&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.1&lt;/version&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>  &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.3.0.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;exclusions&gt;
</span><span class='line'>          &lt;exclusion&gt;
</span><span class='line'>              &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
</span><span class='line'>          &lt;/exclusion&gt;
</span><span class='line'>      &lt;/exclusions&gt;
</span><span class='line'>  &lt;/dependency&gt;
</span><span class='line'>
</span><span class='line'>&lt;/dependencies&gt;
</span><span class='line'>&lt;properties&gt;
</span><span class='line'>  &lt;jersey.version&gt;2.4.1&lt;/jersey.version&gt;
</span><span class='line'>  &lt;spring.version&gt;3.2.4.RELEASE&lt;/spring.version&gt;
</span><span class='line'>  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
</span><span class='line'>&lt;/properties&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A Welcome file.</li>
<li>The Context Config Location.</li>
<li>A ContextLoaderLister and RequestContextListener to integrate spring with the web application.</li>
<li>A Spring Jersey Web Servlet. Specify the location of the provider packages, enable the JSON POJO Mapping Feature, provide the path where the JSP files for the project are stored to the JSP TemplateBasePath and enable the JSP MVC Feature. In this sample, a configuration file named applicationConfig.xml is created under src/main/resources folder  and the JSP files are placed under WEB-INF/jsp folder in the project layout.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!-- This web.xml file is not required when using Servlet 3.0 container,
</span><span class='line'>     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html --&gt;
</span><span class='line'>&lt;web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;welcome-file-list&gt;
</span><span class='line'>      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
</span><span class='line'>  &lt;/welcome-file-list&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;context-param&gt;
</span><span class='line'>          &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
</span><span class='line'>      &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
</span><span class='line'>      &lt;/context-param&gt;
</span><span class='line'>      &lt;listener&gt;
</span><span class='line'>      &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</span><span class='line'>      &lt;/listener&gt;
</span><span class='line'>      &lt;listener&gt;
</span><span class='line'>      &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;
</span><span class='line'>      &lt;/listener&gt;
</span><span class='line'>  
</span><span class='line'>    &lt;servlet&gt;
</span><span class='line'>        &lt;servlet-name&gt;Spring Jersey Web Servlet&lt;/servlet-name&gt;
</span><span class='line'>        &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>            &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;
</span><span class='line'>            &lt;param-value&gt;com.github.elizabetht&lt;/param-value&gt;
</span><span class='line'>        &lt;/init-param&gt;
</span><span class='line'>        &lt;init-param&gt;
</span><span class='line'>              &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;
</span><span class='line'>              &lt;param-value&gt;true&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;jersey.config.server.mvc.templateBasePath.jsp&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;/WEB-INF/jsp&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>      &lt;init-param&gt;
</span><span class='line'>          &lt;param-name&gt;jersey.config.server.provider.classnames&lt;/param-name&gt;
</span><span class='line'>          &lt;param-value&gt;org.glassfish.jersey.server.mvc.jsp.JspMvcFeature&lt;/param-value&gt;
</span><span class='line'>      &lt;/init-param&gt;
</span><span class='line'>        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</span><span class='line'>    &lt;/servlet&gt;
</span><span class='line'>    &lt;servlet-mapping&gt;
</span><span class='line'>        &lt;servlet-name&gt;Spring Jersey Web Servlet&lt;/servlet-name&gt;
</span><span class='line'>        &lt;url-pattern&gt;/webapi/*&lt;/url-pattern&gt;
</span><span class='line'>    &lt;/servlet-mapping&gt;
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<h2>4. Create persistence.xml</h2>

<p>Create a file named persistence.xml under the folder src/main/resources/META-INF folder in the project to define the persistence unit required by JPA. Add the following to the persistence.xml to define a persistence unit named punit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="{http://java.sun.com/xml/ns/persistence} {http://java.sun.com/xml/ns/persistence_2_0.xsd}"
</span><span class='line'>  version="2.0"&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;persistence-unit name="punit"&gt;
</span><span class='line'>  &lt;/persistence-unit&gt;
</span><span class='line'>  
</span><span class='line'>&lt;/persistence&gt;</span></code></pre></td></tr></table></div></figure>


<h2>5. Create the Spring Configuration File</h2>

<p>As defined in the web.xml, create a file named applicationContext.xml under the folder src/main/resources folder in the project to define JPA and Hibernate related configurations. Note that any file created under src/main/resources folder in a maven project will be automagically added by Maven to the classpath. If STS(Spring Tool Suite) is the IDE, go ahead and enable the context, jpa, mvc and tx namespaces. The applicationContext.xml will be as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
</span><span class='line'>  xmlns:tx="http://www.springframework.org/schema/tx"
</span><span class='line'>  xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>  xmlns:mvc="http://www.springframework.org/schema/mvc"
</span><span class='line'>  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
</span><span class='line'>      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span><span class='line'>      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
</span><span class='line'>      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
</span><span class='line'>      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;</span></code></pre></td></tr></table></div></figure>


<p>After enabling the required namespaces, include the following (in between the &lt;beans&gt; and &lt;/beans&gt; tags) to indicate that the application is annotation driven, base package for context component scan and base package for the jpa repositories scan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;mvc:annotation-driven /&gt;
</span><span class='line'>          
</span><span class='line'>&lt;context:annotation-config /&gt;
</span><span class='line'>&lt;context:component-scan base-package="com.github.elizabetht" /&gt;
</span><span class='line'>  
</span><span class='line'>&lt;jpa:repositories base-package="com.github.elizabetht.repository" /&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Next, include the bean PersistenceAnnotationBeanPostProcessor. This is necessary to process the Persistence Unit, Persistence Context annotations and for injecting JPA related resources.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for EntityManagerFactory which lists the various JPA related properties/resources.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
</span><span class='line'>      &lt;property name="persistenceUnitName" value="punit" /&gt;
</span><span class='line'>      &lt;property name="dataSource" ref="dataSource" /&gt;
</span><span class='line'>      &lt;property name="jpaVendorAdapter"&gt;
</span><span class='line'>          &lt;bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"&gt;
</span><span class='line'>              &lt;property name="showSql" value="true" /&gt;
</span><span class='line'>          &lt;/bean&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>      &lt;property name="jpaPropertyMap"&gt;
</span><span class='line'>          &lt;map&gt;
</span><span class='line'>              &lt;entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" /&gt;
</span><span class='line'>              &lt;entry key="hibernate.hbm2ddl.auto" value="validate" /&gt;
</span><span class='line'>              &lt;entry key="hibernate.format_sql" value="true" /&gt;
</span><span class='line'>          &lt;/map&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>  &lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for data source, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
</span><span class='line'>      &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
</span><span class='line'>      &lt;property name="url" value="jdbc:mysql//&lt;include connection url&gt;:3306/studentEnrollment?autoReconnect=true&amp;createDatabaseIfNotExist=true&amp;" /&gt;
</span><span class='line'>      &lt;property name="username" value="&lt;include username&gt;" /&gt;
</span><span class='line'>      &lt;property name="password" value="&lt;include password&gt;" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for transaction manager for scoping/controlling the transactions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;
</span><span class='line'>      &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>  
</span><span class='line'>&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Thus ends the long configuration in applicationContext.xml</p>

<h2>6. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;jsp&rdquo; under WEB-INF (This is where the jsp files will be created as indicated in the web.xml for the JSP TemplateBasePath).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/signup.png" title="Jersey REST Spring Hibernate Signup Layout" alt="Jersey REST Spring Hibernate Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/login.png" title="Jersey REST Spring Hibernate Login Layout" alt="Jersey REST Spring Hibernate Login Layout" /></p>

<p>Also create success.jsp to indicate the login success and failure.jsp to indicate login failure (These are just pages used to display the contents &ndash; no processing logic involved).</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under webapp folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/webapp">https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/webapp</a></p>

<h2>7. Create packages for Resource, Service, Repository and Model tier classes</h2>

<p>Create packages each for the Jersey Resource, Service, Repository and Model classes under the src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/jersey-package.png" title="Jersey REST Spring Package Layout" alt="Jersey REST Spring Package Layout" /></p>

<h2>8. Create classes for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity during signup. Create another POJO class named StudentLogin.java inside the same package com.github.elizabetht.model to include the Student Login details.</p>

<p>Annotate the classes with @Component to be picked by the Context-Component Scan of the Jersey-Spring framework. Also annotate the classes with @XmlRootElement to indicate the XML Element.</p>

<p>A reference link to the files for the Model classes can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/java/com/github/elizabetht/model">https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/java/com/github/elizabetht/model</a></p>

<h2>9. Create class for Repository Tier</h2>

<p>Create an interface class named StudentRepository.java inside the package com.github.elizabetht.repository to support the repository tier database operations.</p>

<p>There are two interface methods needed for the application&rsquo;s purpose.</p>

<ul>
<li>To Insert the Student Signup details into the Database</li>
<li>To Verify the Student Login details from the Database</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Repository("studentRepository")
</span><span class='line'>public interface StudentRepository extends JpaRepository&lt;Student, Long&gt; {
</span><span class='line'>  
</span><span class='line'>  @Query("select s from Student s where s.userName = :userName")
</span><span class='line'>  Student findByUserName(@Param("userName") String userName);
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The save() method is supported by the Hibernate implementation and hence no separate SQL statements are required for the data insert.</p>

<h2>10. Create classes for Service Tier</h2>

<p>Create an interface class named StudentService.java inside the package com.github.elizabetht.service to support the service tier operations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentService {
</span><span class='line'>  Student save(Student student);
</span><span class='line'>  boolean findByLogin(String userName, String password);
</span><span class='line'>  boolean findByUserName(String userName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a service tier implementation class (a POJO indeed) named StudentServiceImpl.java inside the package com.github.elizabetht.service. This is where the application logic goes &ndash; either to save the student details into the database or to verify the student (already saved) details from the database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Service("studentService")
</span><span class='line'>public class StudentServiceImpl implements StudentService {
</span><span class='line'>
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentRepository studentRepository;
</span><span class='line'>  
</span><span class='line'>  @Transactional
</span><span class='line'>  public Student save(Student student) {
</span><span class='line'>      return studentRepository.save(student);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByLogin(String userName, String password) {  
</span><span class='line'>      Student stud = studentRepository.findByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(stud != null && stud.getPassword().equals(password)) {
</span><span class='line'>          return true;
</span><span class='line'>      } 
</span><span class='line'>      
</span><span class='line'>      return false;       
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByUserName(String userName) {
</span><span class='line'>      Student stud = studentRepository.findByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(stud != null) {
</span><span class='line'>          return true;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>11. Create class for Resource Tier</h2>

<p>Create a Resource tier POJO class named StudentResource.java inside the package com.github.elizabetht.resource. This is where a REST API is implemented for each of the operation performed from the front end.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Component
</span><span class='line'>@Path("studentResource")
</span><span class='line'>@XmlRootElement
</span><span class='line'>public class StudentResource {
</span><span class='line'>
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentService studentService;
</span><span class='line'>
</span><span class='line'>  @GET
</span><span class='line'>  @Path("signup")
</span><span class='line'>  @Produces(MediaType.TEXT_HTML)
</span><span class='line'>  public Response signup() {
</span><span class='line'>      return Response.ok(new Viewable("/signup")).build();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @POST
</span><span class='line'>  @Path("signup")
</span><span class='line'>  @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
</span><span class='line'>  @Produces(MediaType.TEXT_HTML)
</span><span class='line'>  public Response signup(@FormParam("userName") String userName,
</span><span class='line'>          @FormParam("password") String password,
</span><span class='line'>          @FormParam("firstName") String firstName,
</span><span class='line'>          @FormParam("lastName") String lastName,
</span><span class='line'>          @FormParam("dateOfBirth") String dateOfBirth,
</span><span class='line'>          @FormParam("emailAddress") String emailAddress)
</span><span class='line'>          throws ParseException {
</span><span class='line'>
</span><span class='line'>      if (userName == null || password == null || firstName == null
</span><span class='line'>              || lastName == null || dateOfBirth == null
</span><span class='line'>              || emailAddress == null) {
</span><span class='line'>          return Response.status(Status.PRECONDITION_FAILED).build();
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      Student student = new Student();
</span><span class='line'>      student.setUserName(userName);
</span><span class='line'>      student.setPassword(password);
</span><span class='line'>      student.setFirstName(firstName);
</span><span class='line'>      student.setLastName(lastName);
</span><span class='line'>
</span><span class='line'>      student.setDateOfBirth(new java.sql.Date(new SimpleDateFormat(
</span><span class='line'>              "MM/dd/yyyy").parse(dateOfBirth.substring(0, 10)).getTime()));
</span><span class='line'>
</span><span class='line'>      student.setEmailAddress(emailAddress);
</span><span class='line'>
</span><span class='line'>      if (studentService.findByUserName(userName)) {
</span><span class='line'>          Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
</span><span class='line'>          map.put("message", "User Name exists. Try another user name");
</span><span class='line'>          map.put("student", student);
</span><span class='line'>          return Response.status(Status.BAD_REQUEST)
</span><span class='line'>                  .entity(new Viewable("/signup", map)).build();
</span><span class='line'>      } else {
</span><span class='line'>          studentService.save(student);
</span><span class='line'>          return Response.ok().entity(new Viewable("/login")).build();
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @GET
</span><span class='line'>  @Path("login")
</span><span class='line'>  @Produces(MediaType.TEXT_HTML)
</span><span class='line'>  public Response login() {
</span><span class='line'>      return Response.ok(new Viewable("/login")).build();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @POST
</span><span class='line'>  @Path("login")
</span><span class='line'>  @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
</span><span class='line'>  @Produces(MediaType.TEXT_HTML)
</span><span class='line'>  public Response login(@FormParam("userName") String userName,
</span><span class='line'>          @FormParam("password") String password) {
</span><span class='line'>
</span><span class='line'>      if (userName == null || password == null) {
</span><span class='line'>          return Response.status(Status.PRECONDITION_FAILED).build();
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      boolean found = studentService.findByLogin(userName, password);
</span><span class='line'>      if (found) {
</span><span class='line'>          return Response.ok().entity(new Viewable("/success")).build();
</span><span class='line'>      } else {
</span><span class='line'>          return Response.status(Status.BAD_REQUEST)
</span><span class='line'>                  .entity(new Viewable("/failure")).build();
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>12. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the dataSource bean in applicationContext.xml</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `student` (
</span><span class='line'>  `id` bigint(20) NOT NULL AUTO_INCREMENT,
</span><span class='line'>  `dateOfBirth` datetime NOT NULL,
</span><span class='line'>  `emailAddress` varchar(255) NOT NULL,
</span><span class='line'>  `firstName` varchar(255) NOT NULL,
</span><span class='line'>  `lastName` varchar(255) NOT NULL,
</span><span class='line'>  `password` varchar(8) NOT NULL,
</span><span class='line'>  `userName` varchar(20) NOT NULL,
</span><span class='line'>  PRIMARY KEY (`id`)
</span><span class='line'>) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure>


<h2>13. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithREST/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithREST/</a></p>

<h2>14. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST.git">https://github.com/elizabetht/StudentEnrollmentWithREST.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.1">https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using JDBC]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-jdbc/"/>
    <updated>2013-11-21T09:41:55-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-jdbc</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with JDBC. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project</h2>

<p>To begin with, in the IDE, create a Java Dynamic Web project for the application. While creating the dynamic web project, enable the checkbox to generate web.xml deployment descriptor.</p>

<p>The sample web application directory structure is shown below with a standard deployment descriptor web.xml</p>

<p><img src="http://elizabetht.github.io/images/jdbclayout.png" title="JDBC Dynamic Web Project Layout" alt="JDBC Dynamic Web Project Layout" /></p>

<h2>2. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A servlet and the corresponding class in the source folder that would handle the HTTP requests.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
<li>A welcome file list, which can be used optionally to include the welcome file for the application.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0"&gt;
</span><span class='line'>  &lt;display-name&gt;StudentEnrollmentWithJDBC&lt;/display-name&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;welcome-file-list&gt;
</span><span class='line'>    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
</span><span class='line'>  &lt;/welcome-file-list&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;servlet&gt;
</span><span class='line'>      &lt;servlet-name&gt;studentJDBCServlet&lt;/servlet-name&gt;
</span><span class='line'>      &lt;servlet-class&gt;com.github.elizabetht.controller.StudentController&lt;/servlet-class&gt;
</span><span class='line'>  &lt;/servlet&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;servlet-mapping&gt;
</span><span class='line'>      &lt;servlet-name&gt;studentJDBCServlet&lt;/servlet-name&gt;
</span><span class='line'>      &lt;url-pattern&gt;/StudentController&lt;/url-pattern&gt;
</span><span class='line'>  &lt;/servlet-mapping&gt;
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. Add JARs to the project</h2>

<p>Add the following JARs from the web (or their latest equivalent) to the WEB-INF/lib folder under WebContent directory in the project.</p>

<ul>
<li>mysql-connector-java-5.1.26-bin.jar (for MYSQL data access support)</li>
<li>jstl.jar and standard.jar (for JSTL Expression language support)</li>
<li>ojdbc5.jar (for Oracle JDBC Driver support)</li>
</ul>


<p>The sample lib folder structure is shown below with the necessary JARs added for the project.</p>

<p><img src="http://elizabetht.github.io/images/jdbcliblayout.png" title="JDBC Library Layout" alt="JDBC Library Layout" /></p>

<h2>4. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;content&rdquo; under WebContent (This is where the jsp files will be created).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/signup.png" title="JDBC Signup Layout" alt="JDBC Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/login.png" title="JDBC Login Layout" alt="JDBC Login Layout" /></p>

<p>The main actions for this application are as follows:</p>

<ul>
<li>Signup (To Insert the Student Signup details into the Database)</li>
<li>Login (To Verify the Student Login details from the Database)</li>
</ul>


<p>In order to display a success (result) page after the login action is complete, create a success.jsp page to indicate the login success. Similarly, to indicate a login failure (result), create a page failure.jsp. These are just pages used to display the contents &ndash; no processing logic involved.</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under WebContent folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC/tree/master/WebContent">https://github.com/elizabetht/StudentEnrollmentWithJDBC/tree/master/WebContent</a></p>

<h2>5. Create packages</h2>

<p>Create packages each for the Controller, Repository and Model tiers under the src folder.
Also create package for the utilities class under the src folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/jdbc-package.png" title="JDBC Package Layout" alt="JDBC Package Layout" /></p>

<h2>6. Create class for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Student {
</span><span class='line'>  private String userName;
</span><span class='line'>  private String firstName;
</span><span class='line'>  private String lastName;
</span><span class='line'>  private String password;
</span><span class='line'>  private String emailAddress;
</span><span class='line'>  private Date dateOfBirth;
</span><span class='line'>
</span><span class='line'>  public String getUserName() {
</span><span class='line'>      return userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setUserName(String userName) {
</span><span class='line'>      this.userName = userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getFirstName() {
</span><span class='line'>      return firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setFirstName(String firstName) {
</span><span class='line'>      this.firstName = firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getLastName() {
</span><span class='line'>      return lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setLastName(String lastName) {
</span><span class='line'>      this.lastName = lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPassword() {
</span><span class='line'>      return password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setPassword(String password) {
</span><span class='line'>      this.password = password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getEmailAddress() {
</span><span class='line'>      return emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setEmailAddress(String emailAddress) {
</span><span class='line'>      this.emailAddress = emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Date getDateOfBirth() {
</span><span class='line'>      return dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setDateOfBirth(Date dateOfBirth) {
</span><span class='line'>      this.dateOfBirth = dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>7. Create db.properties file</h2>

<p>Create a file named db.properties under the src folder, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dbDriver=com.mysql.jdbc.Driver
</span><span class='line'>connectionUrl=jdbc:mysql://&lt;include connection url&gt;:3306/studentEnrollment
</span><span class='line'>userName=&lt;include username&gt;
</span><span class='line'>password=&lt;include password&gt;</span></code></pre></td></tr></table></div></figure>


<h2>8. Create utility class </h2>

<p>Create a POJO class named DbUtil.java under the package com.github.elizabetht.util to include a helper class functionality that would load the db.properties file and get the database connection.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class DbUtil {
</span><span class='line'>  private static Connection dbConnection = null;
</span><span class='line'>
</span><span class='line'>  public static Connection getConnection() {
</span><span class='line'>      if (dbConnection != null) {
</span><span class='line'>          return dbConnection;
</span><span class='line'>      } else {
</span><span class='line'>          try {
</span><span class='line'>              InputStream inputStream = DbUtil.class.getClassLoader()
</span><span class='line'>                      .getResourceAsStream("db.properties");
</span><span class='line'>              Properties properties = new Properties();
</span><span class='line'>              if (properties != null) {
</span><span class='line'>                  properties.load(inputStream);
</span><span class='line'>
</span><span class='line'>                  String dbDriver = properties.getProperty("dbDriver");
</span><span class='line'>                  String connectionUrl = properties
</span><span class='line'>                          .getProperty("connectionUrl");
</span><span class='line'>                  String userName = properties.getProperty("userName");
</span><span class='line'>                  String password = properties.getProperty("password");
</span><span class='line'>
</span><span class='line'>                  Class.forName(dbDriver).newInstance();
</span><span class='line'>                  dbConnection = DriverManager.getConnection(connectionUrl,
</span><span class='line'>                          userName, password);
</span><span class='line'>              }
</span><span class='line'>          } catch (Exception e) {
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          }
</span><span class='line'>          return dbConnection;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>9. Create class for Repository tier</h2>

<p>Create a Repository tier POJO class named StudentRepository.java under the package com.github.elizabetht.repository to support the database operations of saving the student details, verifying the student login details and checking if the username exists when a save is attempted.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentRepository {
</span><span class='line'>  private Connection dbConnection;
</span><span class='line'>  
</span><span class='line'>  public StudentRepository() {
</span><span class='line'>      dbConnection = DbUtil.getConnection();
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public void save(String userName, String password, String firstName, String lastName, String dateOfBirth, String emailAddress) {
</span><span class='line'>      try {
</span><span class='line'>          PreparedStatement prepStatement = dbConnection.prepareStatement("insert into student(userName, password, firstName, lastName, dateOfBirth, emailAddress) values (?, ?, ?, ?, ?, ?)");
</span><span class='line'>          prepStatement.setString(1, userName);
</span><span class='line'>          prepStatement.setString(2, password);
</span><span class='line'>          prepStatement.setString(3, firstName);
</span><span class='line'>          prepStatement.setString(4, lastName);
</span><span class='line'>          prepStatement.setDate(5, new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy")
</span><span class='line'>          .parse(dateOfBirth.substring(0, 10)).getTime()));
</span><span class='line'>          prepStatement.setString(6, emailAddress);
</span><span class='line'>          
</span><span class='line'>          prepStatement.executeUpdate();
</span><span class='line'>      } catch (SQLException e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>      } catch (ParseException e) {            
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public boolean findByUserName(String userName) {
</span><span class='line'>      try {
</span><span class='line'>          PreparedStatement prepStatement = dbConnection.prepareStatement("select count(*) from student where userName = ?");
</span><span class='line'>          prepStatement.setString(1, userName);   
</span><span class='line'>                      
</span><span class='line'>          ResultSet result = prepStatement.executeQuery();
</span><span class='line'>          if (result != null) {   
</span><span class='line'>              while (result.next()) {
</span><span class='line'>                  if (result.getInt(1) == 1) {
</span><span class='line'>                      return true;
</span><span class='line'>                  }               
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>      }
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  public boolean findByLogin(String userName, String password) {
</span><span class='line'>      try {
</span><span class='line'>          PreparedStatement prepStatement = dbConnection.prepareStatement("select password from student where userName = ?");
</span><span class='line'>          prepStatement.setString(1, userName);           
</span><span class='line'>          
</span><span class='line'>          ResultSet result = prepStatement.executeQuery();
</span><span class='line'>          if (result != null) {
</span><span class='line'>              while (result.next()) {
</span><span class='line'>                  if (result.getString(1).equals(password)) {
</span><span class='line'>                      return true;
</span><span class='line'>                  }
</span><span class='line'>              }               
</span><span class='line'>          }           
</span><span class='line'>      } catch (Exception e) {
</span><span class='line'>          e.printStackTrace();
</span><span class='line'>      }
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>10. Create class for Controller Tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the servicing logic of the application goes &ndash; whether a signup or login action is called.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SuppressWarnings("serial")
</span><span class='line'>public class StudentController extends HttpServlet {
</span><span class='line'>  private StudentRepository studentRepository;
</span><span class='line'>
</span><span class='line'>  private static String STUDENT_SIGNUP = "content/signup.jsp";
</span><span class='line'>  private static String STUDENT_LOGIN = "content/login.jsp";
</span><span class='line'>  private static String LOGIN_SUCCESS = "content/success.jsp";
</span><span class='line'>  private static String LOGIN_FAILURE = "content/failure.jsp";
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * @see HttpServlet#HttpServlet()
</span><span class='line'>   */
</span><span class='line'>  public StudentController() {
</span><span class='line'>      super();
</span><span class='line'>      studentRepository = new StudentRepository();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
</span><span class='line'>   *      response)
</span><span class='line'>   */
</span><span class='line'>  protected void doGet(HttpServletRequest request,
</span><span class='line'>          HttpServletResponse response) throws ServletException, IOException {    
</span><span class='line'>      String forward = STUDENT_SIGNUP;
</span><span class='line'>      RequestDispatcher view = request.getRequestDispatcher(forward);
</span><span class='line'>      view.forward(request, response);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
</span><span class='line'>   *      response)
</span><span class='line'>   */
</span><span class='line'>  protected void doPost(HttpServletRequest request,
</span><span class='line'>          HttpServletResponse response) throws ServletException, IOException {
</span><span class='line'>      String pageName = request.getParameter("pageName");
</span><span class='line'>      String forward = "";        
</span><span class='line'>      
</span><span class='line'>      if (studentRepository != null) {
</span><span class='line'>          if (pageName.equals("signup")) {
</span><span class='line'>              if (studentRepository.findByUserName(request
</span><span class='line'>                      .getParameter("userName"))) {
</span><span class='line'>                  request.setAttribute("message", "User Name exists. Try another user name");
</span><span class='line'>                  forward = STUDENT_SIGNUP;
</span><span class='line'>                  RequestDispatcher view = request
</span><span class='line'>                          .getRequestDispatcher(forward);
</span><span class='line'>                  view.forward(request, response);
</span><span class='line'>                  return;
</span><span class='line'>              }
</span><span class='line'>
</span><span class='line'>              studentRepository.save(request.getParameter("userName"),
</span><span class='line'>                      request.getParameter("password"),
</span><span class='line'>                      request.getParameter("firstName"),
</span><span class='line'>                      request.getParameter("lastName"),
</span><span class='line'>                      request.getParameter("dateOfBirth"),
</span><span class='line'>                      request.getParameter("emailAddress"));
</span><span class='line'>              forward = STUDENT_LOGIN;
</span><span class='line'>          } else if (pageName.equals("login")) {
</span><span class='line'>              boolean result = studentRepository.findByLogin(
</span><span class='line'>                      request.getParameter("userName"),
</span><span class='line'>                      request.getParameter("password"));
</span><span class='line'>              if (result == true) {
</span><span class='line'>                  forward = LOGIN_SUCCESS;
</span><span class='line'>              } else {
</span><span class='line'>                  forward = LOGIN_FAILURE;
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      RequestDispatcher view = request.getRequestDispatcher(forward);
</span><span class='line'>      view.forward(request, response);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>11. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the db.properties file.</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `student` (
</span><span class='line'>  `id` bigint(20) NOT NULL AUTO_INCREMENT,
</span><span class='line'>  `dateOfBirth` datetime NOT NULL,
</span><span class='line'>  `emailAddress` varchar(255) NOT NULL,
</span><span class='line'>  `firstName` varchar(255) NOT NULL,
</span><span class='line'>  `lastName` varchar(255) NOT NULL,
</span><span class='line'>  `password` varchar(8) NOT NULL,
</span><span class='line'>  `userName` varchar(20) NOT NULL,
</span><span class='line'>  PRIMARY KEY (`id`)
</span><span class='line'>) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure>


<h2>12. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithJDBC/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithJDBC/</a></p>

<h2>13. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC.git">https://github.com/elizabetht/StudentEnrollmentWithJDBC.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC/releases/tag/1.2">https://github.com/elizabetht/StudentEnrollmentWithJDBC/releases/tag/1.2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using Struts 2]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2/"/>
    <updated>2013-11-21T09:41:45-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Struts 2 framework. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project</h2>

<p>To begin with, in the IDE, create a Java Dynamic Web project for the application. While creating the dynamic web project, enable the checkbox to generate web.xml deployment descriptor.</p>

<p>The sample web application directory structure is shown below with a standard deployment descriptor web.xml</p>

<p><img src="http://elizabetht.github.io/images/strutslayout.png" title="Struts Dynamic Web Project Layout" alt="Struts Dynamic Web Project Layout" /></p>

<h2>2. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A Struts Dispatcher named Struts Prepare and Execute Filter to handle both the preparation and execution phases of Struts dispatching process.</li>
<li>A Filter mapping to map the dispatcher created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0"&gt;
</span><span class='line'>  &lt;display-name&gt;StudentEnrollmentWithStruts&lt;/display-name&gt;
</span><span class='line'>  &lt;filter&gt;
</span><span class='line'>          &lt;filter-name&gt;struts2&lt;/filter-name&gt;
</span><span class='line'>          &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
</span><span class='line'>  &lt;/filter&gt;
</span><span class='line'>  &lt;filter-mapping&gt;
</span><span class='line'>          &lt;filter-name&gt;struts2&lt;/filter-name&gt;
</span><span class='line'>          &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</span><span class='line'>  &lt;/filter-mapping&gt;  
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. Add JARs to the project</h2>

<p>Add the following JARs from the web (or their latest equivalent) to the WEB-INF/lib folder under WebContent directory in the project.</p>

<ul>
<li>asm-3.3.jar (for bytecode manipulation framework support)</li>
<li>asm-commons-3.3.jar (for bytecode manipulation framework support)</li>
<li>commons-fileupload-1.3.jar (for file upload capability to your servlets and web applications support)</li>
<li>commons-io-2.0.1.jar (for library of utilities to assist with developing IO functionality)</li>
<li>commons-lang-2.4.jar (for manipulation of core classes by providing helper utilities)</li>
<li>commons-lang3-3.1.jar (for manipulation of core classes by providing helper utilities)</li>
<li>freemarker-2.3.19.jar (for UI tag templates support)</li>
<li>javassist-3.11.0.GA.jar (for JAVA programming ASSISTance support)</li>
<li>mysql-connector-java-5.1.26-bin.jar (for MYSQL data access support)</li>
<li>ognl-3.0.6.jar (for Object Graph Navigation Language (OGNL) support)</li>
<li>struts2-bootstrap-plugin-1.6.1.jar (for Bootstrap support)</li>
<li>struts2-convention-plugin-2.3.15.1.jar (for the zero configuration and naming convention support)</li>
<li>struts2-core-2.3.15.1.jar (for Struts Framework library support)</li>
<li>struts2-jquery-plugin-3.6.1.jar (for JQuery support)</li>
<li>xwork-core-2.3.15.1.jar (for XWork 2 library support)</li>
</ul>


<p>The sample lib folder structure is shown below with the necessary JARs added for the project.</p>

<p><img src="http://elizabetht.github.io/images/strutsliblayout.png" title="Struts Library Layout" alt="Struts Library Layout" /></p>

<h2>4. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;content&rdquo; under WEB-INF (This is where the jsp files will be created).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/struts-signup.png" title="Struts Signup Layout" alt="Struts Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/login.png" title="Struts Login Layout" alt="Struts Login Layout" /></p>

<p>The main actions for this application are as follows:</p>

<ul>
<li>Signup (To Insert the Student Signup details into the Database)</li>
<li>Login (To Verify the Student Login details from the Database)</li>
</ul>


<p>In order to display a success (result) page after the login action is complete, create a login-success.jsp page to indicate the login success (The page name will follow the semantics: &lt;action name&gt;&ndash;&lt;result name&gt;.jsp). Similarly, to indicate a login failure (result), create a page login-failure.jsp (login is the action and failure is the result). Also create a signup-failure.jsp page to indicate the signup failure, possibly due to an already existing username (signup is the action and failure is the result). These are just pages used to display the contents &ndash; no processing logic involved.</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets.</p>

<p>The Struts 2 UI component tags are used to create the page elements like the form, textfield, password and hidden fields. The Struts Bootstrap tags are used for the Twitter Bootstrap integration. The Struts jQuery tags are used to include the AJAX functionality of submitting the form outside from the modal window and to use the UI widgets like the datepicker.</p>

<p>A reference link to the files under WebContent folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent">https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent</a></p>

<h2>5. Create packages</h2>

<p>Create packages each for the Struts Actions(equivalent to Controller), Service, Repository and Model classes under the src folder.
Also create package for the utilities class under the src folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/struts-package.png" title="Struts Package Layout" alt="Struts Package Layout" /></p>

<h2>6. Create class for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Student {
</span><span class='line'>  private String userName;
</span><span class='line'>  private String firstName;
</span><span class='line'>  private String lastName;
</span><span class='line'>  private String password;
</span><span class='line'>  private String emailAddress;
</span><span class='line'>  private Date dateOfBirth;
</span><span class='line'>
</span><span class='line'>  public String getUserName() {
</span><span class='line'>      return userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setUserName(String userName) {
</span><span class='line'>      this.userName = userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getFirstName() {
</span><span class='line'>      return firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setFirstName(String firstName) {
</span><span class='line'>      this.firstName = firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getLastName() {
</span><span class='line'>      return lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setLastName(String lastName) {
</span><span class='line'>      this.lastName = lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPassword() {
</span><span class='line'>      return password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setPassword(String password) {
</span><span class='line'>      this.password = password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getEmailAddress() {
</span><span class='line'>      return emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setEmailAddress(String emailAddress) {
</span><span class='line'>      this.emailAddress = emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public Date getDateOfBirth() {
</span><span class='line'>      return dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setDateOfBirth(Date dateOfBirth) {
</span><span class='line'>      this.dateOfBirth = dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>7. Create db.properties file</h2>

<p>Create a file named db.properties under the src folder, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dbDriver=com.mysql.jdbc.Driver
</span><span class='line'>connectionUrl=jdbc:mysql://&lt;include connection url&gt;:3306/studentEnrollment
</span><span class='line'>userName=&lt;include username&gt;
</span><span class='line'>password=&lt;include password&gt;</span></code></pre></td></tr></table></div></figure>


<h2>8. Create utility class </h2>

<p>Create a POJO class named DbUtil.java under the package com.github.elizabetht.util to include a helper class functionality that would load the db.properties file and get the database connection.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class DbUtil {
</span><span class='line'>  private static Connection dbConnection = null;
</span><span class='line'>
</span><span class='line'>  public static Connection getConnection() {
</span><span class='line'>      if (dbConnection != null) {
</span><span class='line'>          return dbConnection;
</span><span class='line'>      } else {
</span><span class='line'>          try {
</span><span class='line'>              InputStream inputStream = DbUtil.class.getClassLoader()
</span><span class='line'>                      .getResourceAsStream("db.properties");
</span><span class='line'>              Properties properties = new Properties();
</span><span class='line'>              if (properties != null) {
</span><span class='line'>                  properties.load(inputStream);
</span><span class='line'>
</span><span class='line'>                  String dbDriver = properties.getProperty("dbDriver");
</span><span class='line'>                  String connectionUrl = properties
</span><span class='line'>                          .getProperty("connectionUrl");
</span><span class='line'>                  String userName = properties.getProperty("userName");
</span><span class='line'>                  String password = properties.getProperty("password");
</span><span class='line'>
</span><span class='line'>                  Class.forName(dbDriver).newInstance();
</span><span class='line'>                  dbConnection = DriverManager.getConnection(connectionUrl,
</span><span class='line'>                          userName, password);
</span><span class='line'>              }
</span><span class='line'>          } catch (Exception e) {
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          }
</span><span class='line'>          return dbConnection;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>9. Create class for Repository tier</h2>

<p>Create a Repository tier POJO class named StudentRepository.java under the package com.github.elizabetht.repository to support the database operations of saving the student details, verifying the student login details and checking if the username exists when a save is attempted.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentRepository {
</span><span class='line'>  private Connection dbConnection;
</span><span class='line'>
</span><span class='line'>  public StudentRepository() {
</span><span class='line'>      dbConnection = DbUtil.getConnection();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void save(String userName, String password, String firstName,
</span><span class='line'>          String lastName, String dateOfBirth, String emailAddress) {
</span><span class='line'>      if (dbConnection != null) {
</span><span class='line'>          try {
</span><span class='line'>              PreparedStatement prepStatement = dbConnection
</span><span class='line'>                      .prepareStatement("insert into student(userName, password, firstName, lastName, dateOfBirth, emailAddress) values (?, ?, ?, ?, ?, ?)");
</span><span class='line'>              prepStatement.setString(1, userName);
</span><span class='line'>              prepStatement.setString(2, password);
</span><span class='line'>              prepStatement.setString(3, firstName);
</span><span class='line'>              prepStatement.setString(4, lastName);               
</span><span class='line'>              
</span><span class='line'>              prepStatement.setDate(5, new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy")
</span><span class='line'>              .parse(dateOfBirth.substring(0, 10)).getTime()));
</span><span class='line'>
</span><span class='line'>              prepStatement.setString(6, emailAddress);
</span><span class='line'>
</span><span class='line'>              prepStatement.executeUpdate();
</span><span class='line'>          } catch (SQLException e) {
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          } catch (ParseException e) {                
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByUserName(String userName) {
</span><span class='line'>      if (dbConnection != null) {
</span><span class='line'>          try {
</span><span class='line'>              PreparedStatement prepStatement = dbConnection
</span><span class='line'>                      .prepareStatement("select count(*) from student where userName = ?");
</span><span class='line'>              prepStatement.setString(1, userName);
</span><span class='line'>
</span><span class='line'>              ResultSet result = prepStatement.executeQuery();
</span><span class='line'>              if (result != null) {
</span><span class='line'>                  while (result.next()) {
</span><span class='line'>                      if (result.getInt(1) == 1) {
</span><span class='line'>                          return true;
</span><span class='line'>                      }
</span><span class='line'>                  }
</span><span class='line'>              }
</span><span class='line'>          } catch (Exception e) {
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByLogin(String userName, String password) {
</span><span class='line'>      if (dbConnection != null) {
</span><span class='line'>          try {
</span><span class='line'>              PreparedStatement prepStatement = dbConnection
</span><span class='line'>                      .prepareStatement("select password from student where userName = ?");
</span><span class='line'>              prepStatement.setString(1, userName);
</span><span class='line'>
</span><span class='line'>              ResultSet result = prepStatement.executeQuery();
</span><span class='line'>              if (result != null) {
</span><span class='line'>                  while (result.next()) {
</span><span class='line'>                      if (result.getString(1).equals(password)) {
</span><span class='line'>                          return true;
</span><span class='line'>                      }
</span><span class='line'>                  }
</span><span class='line'>              }
</span><span class='line'>          } catch (Exception e) {
</span><span class='line'>              e.printStackTrace();
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>10. Create class for Service Tier</h2>

<p>Create a Controller tier POJO class named StudentService.java inside the package com.github.elizabetht.service. This layer acts as a median between the Controller and Repository tier classes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class StudentService {
</span><span class='line'>
</span><span class='line'>  private StudentRepository studentRepository;
</span><span class='line'>
</span><span class='line'>  public StudentService() {
</span><span class='line'>      studentRepository = new StudentRepository();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String save(String userName, String password,
</span><span class='line'>          String firstName, String lastName, String dateOfBirth,
</span><span class='line'>          String emailAddress) {
</span><span class='line'>      if (studentRepository != null) {
</span><span class='line'>          if (studentRepository.findByUserName(userName)) {
</span><span class='line'>              return "SignupFailure-UserNameExists";
</span><span class='line'>          }
</span><span class='line'>          studentRepository.save(userName, password, firstName, lastName,
</span><span class='line'>                  dateOfBirth, emailAddress);
</span><span class='line'>          return "SignupSuccess";
</span><span class='line'>      } else {
</span><span class='line'>          return "SignupFailure";
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String findByLogin(String userName, String password) {
</span><span class='line'>      String result = "LoginFailure";
</span><span class='line'>      if (studentRepository != null) {
</span><span class='line'>          boolean status = studentRepository.findByLogin(userName, password);
</span><span class='line'>          if (status) {
</span><span class='line'>              result = "LoginSuccess";
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return result;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>11. Create Action classes for Controller tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the routing logic of the application goes &ndash; whether a signup or login action is called. For simplicity sake, two separate action classes are created for each of the operation.</p>

<p>Each of the Action class has to implement the execute() method. Based on the String result returned from the execute() method of the action class, the appropriate view page is rendered.</p>

<p>In most cases, the action class is extended from the general ActionSupport class, which has a lot of easy to use convenient features. So, extend the ActionSupport class in the Action class, unless you have a reason not to!</p>

<p>The following snippet shows the SignupAction class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SuppressWarnings("serial")
</span><span class='line'>public class SignupAction extends ActionSupport {
</span><span class='line'>
</span><span class='line'>  private String pageName;
</span><span class='line'>  private String userName;
</span><span class='line'>  private String password;
</span><span class='line'>  private String firstName;
</span><span class='line'>  private String lastName;
</span><span class='line'>  private String dateOfBirth;
</span><span class='line'>  private String emailAddress;
</span><span class='line'>
</span><span class='line'>  @Action("signup-input")
</span><span class='line'>  public String input() throws Exception {
</span><span class='line'>      return "signup";
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Override
</span><span class='line'>  @Action(value = "signup", results = { @Result(name = "login-input", location = "login-input", type = "redirect") })
</span><span class='line'>  public String execute() throws Exception {
</span><span class='line'>      String result = "";
</span><span class='line'>      StudentService studentService = new StudentService();
</span><span class='line'>
</span><span class='line'>      if (pageName != null && studentService != null) {
</span><span class='line'>          if (pageName.equals("signup")) {
</span><span class='line'>              result = studentService.save(userName, password, firstName,
</span><span class='line'>                      lastName, dateOfBirth, emailAddress);
</span><span class='line'>              if (result.equals("SignupSuccess")) {
</span><span class='line'>                  return "login-input";
</span><span class='line'>              } else {
</span><span class='line'>                  return "failure";
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return SUCCESS;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPageName() {
</span><span class='line'>      return pageName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setPageName(String pageName) {
</span><span class='line'>      this.pageName = pageName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getUserName() {
</span><span class='line'>      return userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "UserName is a required field")
</span><span class='line'>  @StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "UserName must be of length between 6 and 12")
</span><span class='line'>  public void setUserName(String userName) {
</span><span class='line'>      this.userName = userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPassword() {
</span><span class='line'>      return password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "Password is a required field")
</span><span class='line'>  @StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "Password must be of length between 6 and 12")
</span><span class='line'>  public void setPassword(String password) {
</span><span class='line'>      this.password = password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getFirstName() {
</span><span class='line'>      return firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "FirstName is a required field")
</span><span class='line'>  public void setFirstName(String firstName) {
</span><span class='line'>      this.firstName = firstName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getLastName() {
</span><span class='line'>      return lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "LastName is a required field")
</span><span class='line'>  public void setLastName(String lastName) {
</span><span class='line'>      this.lastName = lastName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getEmailAddress() {
</span><span class='line'>      return emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "EmailAddress is a required field")
</span><span class='line'>  @EmailValidator(type = ValidatorType.FIELD, message = "Email Address must be valid")
</span><span class='line'>  public void setEmailAddress(String emailAddress) {
</span><span class='line'>      this.emailAddress = emailAddress;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getDateOfBirth() {
</span><span class='line'>      return dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "DateOfBirth is a required field")
</span><span class='line'>  public void setDateOfBirth(String dateOfBirth) {
</span><span class='line'>      this.dateOfBirth = dateOfBirth;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Similar to the SignupAction class, the LoginAction class also implements the execute() method as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@SuppressWarnings("serial")
</span><span class='line'>public class LoginAction extends ActionSupport {
</span><span class='line'>
</span><span class='line'>  private String pageName;
</span><span class='line'>  private String userName;
</span><span class='line'>  private String password;
</span><span class='line'>
</span><span class='line'>  @Action("login-input")
</span><span class='line'>  public String input() throws Exception {
</span><span class='line'>      return "login";
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @Action("login")
</span><span class='line'>  public String execute() throws Exception {
</span><span class='line'>      String result = "";
</span><span class='line'>      StudentService studentService = new StudentService();
</span><span class='line'>
</span><span class='line'>      if (pageName != null && studentService != null) {
</span><span class='line'>          if (pageName.equals("login")) {
</span><span class='line'>              result = studentService.findByLogin(userName, password);
</span><span class='line'>              if (result.equals("LoginFailure")) {
</span><span class='line'>                  return "failure";
</span><span class='line'>              } else {
</span><span class='line'>                  return "success";
</span><span class='line'>              }
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      return SUCCESS;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPageName() {
</span><span class='line'>      return pageName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void setPageName(String pageName) {
</span><span class='line'>      this.pageName = pageName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getUserName() {
</span><span class='line'>      return userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "UserName is a required field")
</span><span class='line'>  @StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "UserName must be of length between 6 and 12")
</span><span class='line'>  public void setUserName(String userName) {
</span><span class='line'>      this.userName = userName;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public String getPassword() {
</span><span class='line'>      return password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequiredStringValidator(type = ValidatorType.FIELD, message = "Password is a required field")
</span><span class='line'>  @StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "Password must be of length between 6 and 12")
</span><span class='line'>  public void setPassword(String password) {
</span><span class='line'>      this.password = password;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The @Action annotation is used to specify the incoming requested URL and results to be rendered. For results other than SUCCESS (or the equivalent success string), the resulting view will be rendered based on the value of the result. For instance, in SignupAction class, if &ldquo;failure&rdquo; string is returned from the execute() method, the result will be appended to the @Action value (which is &ldquo;signup&rdquo;, in this case) and the signup-failure.jsp page will be rendered. Similarly, in LoginAction class, if &ldquo;failure&rdquo; string is returned from the execute() method, the login-failure.jsp page will be rendered.</p>

<p>If SUCCESS (or the equivalent success string) is returned from the execute() method, the actual value of action will be the resulting view, unless there are no results specified using the @Result annotation. For instance, in LoginAction class, there are no @Result annotations used and hence, login-success.jsp will be rendered when execute() method returns a SUCCESS string.</p>

<p>But if there are results specified with @Result annotation as in SignupAction class, the name and location given by the results array will determine the view rendered &ndash; in this case, login-input action will be rendered (which is in-turn, an action specified by the LoginAction class).</p>

<h2>12. Add Validators to the Form Fields</h2>

<p>As shown in the above snippets of SignupAction and LoginAction classes, add the following required validators to the setter methods for the fields.</p>

<p>@RequiredStringValidator is used to check that a String field is not empty.</p>

<p>@StringLengthFieldValidator is used to check that a String field is of the right length. It assumes that the field is a String. If neither minLength nor maxLength is set, nothing will be done.</p>

<p>@EmailValidator is used to check that a field is a valid e-mail address if it contains a non-empty String.</p>

<h2>13. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the db.properties file.</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `student` (
</span><span class='line'>  `id` bigint(20) NOT NULL AUTO_INCREMENT,
</span><span class='line'>  `dateOfBirth` datetime NOT NULL,
</span><span class='line'>  `emailAddress` varchar(255) NOT NULL,
</span><span class='line'>  `firstName` varchar(255) NOT NULL,
</span><span class='line'>  `lastName` varchar(255) NOT NULL,
</span><span class='line'>  `password` varchar(8) NOT NULL,
</span><span class='line'>  `userName` varchar(20) NOT NULL,
</span><span class='line'>  PRIMARY KEY (`id`)
</span><span class='line'>) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure>


<h2>14. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithStruts">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithStruts</a></p>

<h2>15. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts.git">https://github.com/elizabetht/StudentEnrollmentWithStruts.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.4">https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using Hibernate With Spring]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-hibernate-with-spring/"/>
    <updated>2013-11-21T09:41:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-hibernate-with-spring</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Hibernate ORM in a Spring environment. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project using Maven Template</h2>

<p>To begin with, in the IDE, create a Java Maven project with the template of maven-archetype-webapp (Filter the catalog based on the string &ldquo;webapp&rdquo;) by providing appropriate values for GroupId and Artifact Id for the project. The sample web application directory structure is shown below with a standard deployment descriptor web.xml and Maven pom.xml</p>

<p><img src="http://elizabetht.github.io/images/springlayout.png" title="Spring Hibernate Project Layout" alt="Hibernate Spring Maven Project Layout" /></p>

<h2>2. Update pom.xml</h2>

<p>To make the above Maven Java Web Application project support the Hibernate ORM in Spring framework, add the following dependencies to the existing pom.xml</p>

<ul>
<li>jstl, spring-webmvc and servlet-api (for Spring support)</li>
<li>mysql-connector-java (for MYSQL support)</li>
<li>spring-jdbc (for data access with JDBC Spring)</li>
<li>spring-orm (for ORM data access with Spring)</li>
<li>spring-data-jpa (for JPA support)</li>
<li>hibernate-validator and hibernate-entitymanager (for Hibernate Support)</li>
<li>jta (for transaction support)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;2.5&lt;/version&gt;
</span><span class='line'>      &lt;scope&gt;provided&lt;/scope&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.2&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;mysql&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;5.1.21&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;4.2.0.Final&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;4.1.9.Final&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jta&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.1&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.3.0.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;exclusions&gt;
</span><span class='line'>          &lt;exclusion&gt;
</span><span class='line'>              &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>              &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
</span><span class='line'>          &lt;/exclusion&gt;
</span><span class='line'>      &lt;/exclusions&gt;
</span><span class='line'>    &lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A servlet and specify the location of the configuration file for the same. In this sample, a configuration file named springConfig.xml is created under WEB-INF/config folder in the project layout.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
<li>A ContextLoaderListener to integrate spring with the web application and provide the contextConfigLocation where the context files for JPA.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;web-app version="2.5"
</span><span class='line'>xmlns="http://java.sun.com/xml/ns/javaee"
</span><span class='line'>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;servlet&gt;
</span><span class='line'>  &lt;servlet-name&gt;studentHibernateServlet&lt;/servlet-name&gt;
</span><span class='line'>  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
</span><span class='line'>      &lt;param-value&gt;/WEB-INF/config/servletConfig.xml&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>&lt;/servlet&gt;
</span><span class='line'>
</span><span class='line'>&lt;servlet-mapping&gt;
</span><span class='line'>  &lt;servlet-name&gt;studentHibernateServlet&lt;/servlet-name&gt;
</span><span class='line'>  &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
</span><span class='line'>&lt;/servlet-mapping&gt;
</span><span class='line'>
</span><span class='line'>&lt;context-param&gt;
</span><span class='line'>  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
</span><span class='line'>  &lt;param-value&gt;classpath:/jpaContext.xml&lt;/param-value&gt;
</span><span class='line'>&lt;/context-param&gt;
</span><span class='line'>
</span><span class='line'>&lt;listener&gt;
</span><span class='line'>  &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
</span><span class='line'>&lt;/listener&gt;
</span><span class='line'>
</span><span class='line'>  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
</span><span class='line'>&lt;/web-app&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>4. Create the Spring Configuration File</h2>

<p>Create a Spring Bean Configuration file under the folder WEB-INF/config. If a STS(Spring Tool Suite) is the IDE, go ahead and enable the context and mvc namespaces. The servletConfig.xml will be as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>  xmlns:mvc="http://www.springframework.org/schema/mvc"
</span><span class='line'>  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
</span><span class='line'>      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span><span class='line'>      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;/beans&gt;</span></code></pre></td></tr></table></div></figure>


<p>After enabling the required namespaces, include the following (in between the &lt;beans&gt; and &lt;/beans&gt; tags) to indicate that the application is annotation driven and base package for the context component scan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;mvc:annotation-driven /&gt;
</span><span class='line'>
</span><span class='line'>&lt;context:component-scan base-package="com.github.elizabetht" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean InternalResourceViewResolver of Spring to locate the jsp files</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
</span><span class='line'>  &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;
</span><span class='line'>  &lt;property name="suffix" value=".jsp" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for specifying a properties file (more on this later) which is to be used to store custom messages or properties. The following configuration allows to create a properties file named messages.properties under the src/main/resources folder in the project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
</span><span class='line'>  &lt;property name="basename" value="messages" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<h2>5. Create persistence.xml</h2>

<p>Create a file named persistence.xml under the folder src/main/resources/META-INF folder in the project to define the persistence unit required by JPA. Add the following to the persistence.xml to define a persistence unit named punit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;persistence xmlns="http://java.sun.com/xml/ns/persistence"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xsi:schemaLocation="{http://java.sun.com/xml/ns/persistence} {http://java.sun.com/xml/ns/persistence_2_0.xsd}"
</span><span class='line'>  version="2.0"&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;persistence-unit name="punit"&gt;
</span><span class='line'>  &lt;/persistence-unit&gt;
</span><span class='line'>  
</span><span class='line'>&lt;/persistence&gt;</span></code></pre></td></tr></table></div></figure>


<h2>6. Create jpaContext.xml</h2>

<p>As defined in the web.xml, create a file named jpaContext.xml under the folder src/main/resources folder in the project to define JPA and Hibernate related configurations. Note that any file created under src/main/resources folder in a maven project will be automagically added by Maven to the classpath. If STS(Spring Tool Suite) is the IDE, go ahead and enable the context, jpa and tx namespaces. The jpaContext.xml will be as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xmlns:tx="http://www.springframework.org/schema/tx"
</span><span class='line'>  xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
</span><span class='line'>  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span><span class='line'>      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
</span><span class='line'>      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
</span><span class='line'>      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;
</span><span class='line'>      
</span><span class='line'>&lt;beans&gt;</span></code></pre></td></tr></table></div></figure>


<p>After enabling the required namespaces, include the following (in between the &lt;beans&gt; and &lt;/beans&gt; tags) to indicate that the application is annotation driven and base package for the jpa repositories scan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;context:annotation-config /&gt;
</span><span class='line'>  
</span><span class='line'>&lt;jpa:repositories base-package="com.github.elizabetht.repository" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, include the bean PersistenceAnnotationBeanPostProcessor. This is necessary to process the Persistence Unit, Persistence Context annotations and for injecting JPA related resources.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for EntityManagerFactory which lists the various JPA related properties/resources.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
</span><span class='line'>      &lt;property name="persistenceUnitName" value="punit" /&gt;
</span><span class='line'>      &lt;property name="dataSource" ref="dataSource" /&gt;
</span><span class='line'>      &lt;property name="jpaVendorAdapter"&gt;
</span><span class='line'>          &lt;bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"&gt;
</span><span class='line'>              &lt;property name="showSql" value="true" /&gt;
</span><span class='line'>          &lt;/bean&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>      &lt;property name="jpaPropertyMap"&gt;
</span><span class='line'>          &lt;map&gt;
</span><span class='line'>              &lt;entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" /&gt;
</span><span class='line'>              &lt;entry key="hibernate.hbm2ddl.auto" value="validate" /&gt;
</span><span class='line'>              &lt;entry key="hibernate.format_sql" value="true" /&gt;
</span><span class='line'>          &lt;/map&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>  &lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for data source, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
</span><span class='line'>      &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
</span><span class='line'>      &lt;property name="url" value="jdbc:mysql//&lt;include connection url&gt;:3306/studentEnrollment?autoReconnect=true&amp;createDatabaseIfNotExist=true&amp;" /&gt;
</span><span class='line'>      &lt;property name="username" value="&lt;include username&gt;" /&gt;
</span><span class='line'>      &lt;property name="password" value="&lt;include password&gt;" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for transaction manager for scoping/controlling the transactions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;
</span><span class='line'>      &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;
</span><span class='line'>&lt;/bean&gt;
</span><span class='line'>  
</span><span class='line'>&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Thus ends the long configuration in jpaContext.xml</p>

<h2>7. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;jsp&rdquo; under WEB-INF (This is where the jsp files will be created as indicated in the servletConfig.xml for the InternalResourceViewResolver bean).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/signup.png" title="Spring Hibernate Signup Layout" alt="Spring Hibernate Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/login.png" title="Spring Hibernate Login Layout" alt="Spring Hibernate Login Layout" /></p>

<p>Also create success.jsp to indicate the login success and failure.jsp to indicate login failure (These are just pages used to display the contents &ndash; no processing logic involved).</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under webapp folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/webapp">https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/webapp</a></p>

<h2>8. Create packages for Controller, Model, Repository and Service tier classes</h2>

<p>Create packages each for the Spring Controller, Model, Repository and Service classes under the src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/spring-hibernate-package.png" title="Spring Hibernate Package Layout" alt="Spring Hibernate Package Layout" /></p>

<h2>9. Create classes for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity during signup. Create another POJO class named StudentLogin.java inside the same package com.github.elizabetht.model to include the Student Login details.</p>

<p>A reference link to the files for the Model classes can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/java/com/github/elizabetht/model">https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/java/com/github/elizabetht/model</a></p>

<h2>10. Create class for Repository Tier</h2>

<p>Create an interface class named StudentRepository.java inside the package com.github.elizabetht.repository to support the repository tier database operations.</p>

<p>There are two interface methods needed for the application&rsquo;s purpose.</p>

<ul>
<li>To Insert the Student Signup details into the Database</li>
<li>To Verify the Student Login details from the Database</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Repository("studentRepository")
</span><span class='line'>public interface StudentRepository extends JpaRepository&lt;Student, Long&gt; {
</span><span class='line'>  
</span><span class='line'>  @Query("select s from Student s where s.userName = :userName")
</span><span class='line'>  Student findByUserName(@Param("userName") String userName);
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The save() method is supported by the Hibernate implementation and hence no separate SQL statements are required for the data insert.</p>

<h2>11. Create classes for Service Tier</h2>

<p>Create an interface class named StudentService.java inside the package com.github.elizabetht.service to support the service tier operations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentService {
</span><span class='line'>  Student save(Student student);
</span><span class='line'>  boolean findByLogin(String userName, String password);
</span><span class='line'>  boolean findByUserName(String userName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a service tier implementation class (a POJO indeed) named StudentServiceImpl.java inside the package com.github.elizabetht.service. This is where the application logic goes &ndash; either to save the student details into the database or to verify the student (already saved) details from the database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Service("studentService")
</span><span class='line'>public class StudentServiceImpl implements StudentService {
</span><span class='line'>
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentRepository studentRepository;
</span><span class='line'>  
</span><span class='line'>  @Transactional
</span><span class='line'>  public Student save(Student student) {
</span><span class='line'>      return studentRepository.save(student);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByLogin(String userName, String password) {  
</span><span class='line'>      Student stud = studentRepository.findByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(stud != null && stud.getPassword().equals(password)) {
</span><span class='line'>          return true;
</span><span class='line'>      } 
</span><span class='line'>      
</span><span class='line'>      return false;       
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean findByUserName(String userName) {
</span><span class='line'>      Student stud = studentRepository.findByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(stud != null) {
</span><span class='line'>          return true;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>12. Create class for Controller Tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the routing logic of the application goes &ndash; whether a signup or login action is called.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@SessionAttributes("student")
</span><span class='line'>public class StudentController {
</span><span class='line'>  
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentService studentService;
</span><span class='line'>      
</span><span class='line'>  @RequestMapping(value="/signup", method=RequestMethod.GET)
</span><span class='line'>  public String signup(Model model) {
</span><span class='line'>      Student student = new Student();        
</span><span class='line'>      model.addAttribute("student", student);     
</span><span class='line'>      return "signup";
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/signup", method=RequestMethod.POST)
</span><span class='line'>  public String signup(@Valid @ModelAttribute("student") Student student, BindingResult result, Model model) {        
</span><span class='line'>      if(result.hasErrors()) {
</span><span class='line'>          return "signup";
</span><span class='line'>      } else if(studentService.findByUserName(student.getUserName())) {
</span><span class='line'>          model.addAttribute("message", "User Name exists. Try another user name");
</span><span class='line'>          return "signup";
</span><span class='line'>      } else {
</span><span class='line'>          studentService.save(student);
</span><span class='line'>          model.addAttribute("message", "Saved student details");
</span><span class='line'>          return "redirect:login.html";
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  @RequestMapping(value="/login", method=RequestMethod.GET)
</span><span class='line'>  public String login(Model model) {          
</span><span class='line'>      StudentLogin studentLogin = new StudentLogin();     
</span><span class='line'>      model.addAttribute("studentLogin", studentLogin);
</span><span class='line'>      return "login";
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/login", method=RequestMethod.POST)
</span><span class='line'>  public String login(@Valid @ModelAttribute("studentLogin") StudentLogin studentLogin, BindingResult result) {
</span><span class='line'>      if (result.hasErrors()) {
</span><span class='line'>          return "login";
</span><span class='line'>      } else {
</span><span class='line'>          boolean found = studentService.findByLogin(studentLogin.getUserName(), studentLogin.getPassword());
</span><span class='line'>          if (found) {                
</span><span class='line'>              return "success";
</span><span class='line'>          } else {                
</span><span class='line'>              return "failure";
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>13. Create messages.properties file</h2>

<p>As seen above, the @Valid annotation is used to validate the input parameters of the form reaching the method and the result of the validation is stored in BindingResult object. In order to validate specific fields, (refer the classes created for the Model tier &ndash; <a href="https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/java/com/github/elizabetht/model">https://github.com/elizabetht/StudentEnrollmentWithSpring/tree/master/src/main/java/com/github/elizabetht/model</a>), use annotations like @NotEmpty, @Size, @Email and @NotNull from the various validations available from the Hibernate Validator.</p>

<p>The Custom messages that should be displayed when any of the above mentioned validators fail is specified in the messages.properties file. Create a file named messages.properties under src/main/resources folder and include the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NotEmpty=Field cannot be blank
</span><span class='line'>NotNull=Field cannot be blank
</span><span class='line'>
</span><span class='line'>Email=Email Address not valid/well-formed
</span><span class='line'>Past=Date of Birth must be in the past 
</span><span class='line'>
</span><span class='line'>Size={0} must be between {2} and {1} characters long
</span><span class='line'>typeMismatch=Invalid format</span></code></pre></td></tr></table></div></figure>


<h2>14. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the dataSource bean in jpaContext.xml</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `student` (
</span><span class='line'>  `id` bigint(20) NOT NULL AUTO_INCREMENT,
</span><span class='line'>  `dateOfBirth` datetime NOT NULL,
</span><span class='line'>  `emailAddress` varchar(255) NOT NULL,
</span><span class='line'>  `firstName` varchar(255) NOT NULL,
</span><span class='line'>  `lastName` varchar(255) NOT NULL,
</span><span class='line'>  `password` varchar(8) NOT NULL,
</span><span class='line'>  `userName` varchar(20) NOT NULL,
</span><span class='line'>  PRIMARY KEY (`id`)
</span><span class='line'>) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure>


<h2>15. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithSpring/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithSpring/</a></p>

<h2>16. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithSpring.git">https://github.com/elizabetht/StudentEnrollmentWithSpring.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithSpring/releases/tag/1.6">https://github.com/elizabetht/StudentEnrollmentWithSpring/releases/tag/1.6</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using MyBatis With Spring]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-mybatis-with-spring/"/>
    <updated>2013-11-21T09:41:09-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-mybatis-with-spring</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with MyBatis framework in a Spring environment. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project using Maven Template</h2>

<p>To begin with, in the IDE, create a Java Maven project with the template of maven-archetype-webapp (Filter the catalog based on the string &ldquo;webapp&rdquo;) by providing appropriate values for GroupId and Artifact Id for the project. The sample web application directory structure is shown below with a standard deployment descriptor web.xml and Maven pom.xml</p>

<p><img src="http://elizabetht.github.io/images/mybatislayout.png" title="MyBatis Project Layout" alt="MyBatis Maven Project Layout" /></p>

<h2>2. Update pom.xml</h2>

<p>To make the above Maven Java Web Application project support the MyBatis framework, add the following dependencies to the existing pom.xml</p>

<ul>
<li>mybatis (for MyBatis support)</li>
<li>mybatis-spring (for MyBatis-Spring integration support)</li>
<li>jstl, spring-webmvc, servlet-api and spring-context-support (for Spring support)</li>
<li>spring-test (may be optional, needed if Spring-test support is needed)</li>
<li>mysql-connector-java (for MYSQL support)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.1.1&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.1.1&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.1.1.RELEASE&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.1.1.RELEASE&lt;/version&gt;
</span><span class='line'>      &lt;scope&gt;test&lt;/scope&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;mysql&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;5.1.21&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;jstl&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;1.2&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;3.2.4.RELEASE&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;
</span><span class='line'>    &lt;dependency&gt;
</span><span class='line'>      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
</span><span class='line'>      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
</span><span class='line'>      &lt;version&gt;2.5&lt;/version&gt;
</span><span class='line'>    &lt;/dependency&gt;</span></code></pre></td></tr></table></div></figure>


<h2>3. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A servlet and specify the location of the configuration file for the same. In this sample, a configuration file named springConfig.xml is created under WEB-INF/config folder in the project layout.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;web-app version="2.5"
</span><span class='line'>xmlns="http://java.sun.com/xml/ns/javaee"
</span><span class='line'>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt;
</span><span class='line'>
</span><span class='line'>&lt;servlet&gt;
</span><span class='line'>  &lt;servlet-name&gt;myBatisServlet&lt;/servlet-name&gt;
</span><span class='line'>  &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
</span><span class='line'>      &lt;param-value&gt;/WEB-INF/config/springConfig.xml&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>&lt;/servlet&gt;
</span><span class='line'>
</span><span class='line'>&lt;servlet-mapping&gt;
</span><span class='line'>  &lt;servlet-name&gt;myBatisServlet&lt;/servlet-name&gt;
</span><span class='line'>  &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;
</span><span class='line'>&lt;/servlet-mapping&gt;
</span><span class='line'>
</span><span class='line'>  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
</span><span class='line'>&lt;/web-app&gt;</span></code></pre></td></tr></table></div></figure>


<h2>4. Create the Spring Configuration File</h2>

<p>Create a Spring Bean Configuration file under the folder WEB-INF/config. If STS(Spring Tool Suite) is the IDE, go ahead and enable the context, mvc and tx namespaces. The springConfig.xml will be as shown below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;beans xmlns="http://www.springframework.org/schema/beans"
</span><span class='line'>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
</span><span class='line'>  xmlns:context="http://www.springframework.org/schema/context"
</span><span class='line'>  xmlns:mvc="http://www.springframework.org/schema/mvc"
</span><span class='line'>  xmlns:tx="http://www.springframework.org/schema/tx"
</span><span class='line'>  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
</span><span class='line'>      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
</span><span class='line'>      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
</span><span class='line'>      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;/beans&gt;</span></code></pre></td></tr></table></div></figure>


<p>After enabling the required namespaces, include the following (in between the &lt;beans&gt; and &lt;/beans&gt; tags) to indicate that the application is annotation driven and base package for the context component scan.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;mvc:annotation-driven /&gt;
</span><span class='line'>
</span><span class='line'>&lt;context:component-scan base-package="com.github.elizabetht" /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean InternalResourceViewResolver of Spring to locate the jsp files</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
</span><span class='line'>  &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;
</span><span class='line'>  &lt;property name="suffix" value=".jsp" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for data source, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
</span><span class='line'>  &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
</span><span class='line'>  &lt;property name="url" value="jdbc:mysql//&lt;include connection url&gt;:3306/studentEnrollment?autoReconnect=true&amp;createDatabaseIfNotExist=true&amp;" /&gt;
</span><span class='line'>  &lt;property name="username" value="&lt;include username&gt;" /&gt;
</span><span class='line'>  &lt;property name="password" value="&lt;include password&gt;" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for transaction manager for scoping/controlling the transactions, that takes the data source defined above as reference (dependent)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;tx:annotation-driven transaction-manager="transactionManager" /&gt;
</span><span class='line'>&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;
</span><span class='line'>  &lt;property name="dataSource" ref="dataSource" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Coming to the MyBatis specific configurations, include the bean for sqlSessionFactory which is the central configuration in a MyBatis application. This bean takes in three properties
&ndash; dataSource (already configured above)&nbsp;
&ndash; typeAliasesPackage (location where the model classes of this application resides)&nbsp;
&ndash; mapperLocations (location where the mapper xml files for the model resides &ndash; this is not needed here as annotation based configurations are used instead)&nbsp;</p>

<p>More details of this can be read at <a href="http://mybatis.github.io/mybatis-3/">http://mybatis.github.io/mybatis-3/</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;
</span><span class='line'>  &lt;property name="dataSource" ref="dataSource" /&gt;
</span><span class='line'>  &lt;property name="typeAliasesPackage" value="com.github.elizabetht.model"/&gt;
</span><span class='line'>  &lt;property name="mapperLocations" value="classpath*:com/github/elizabetht/mappers/*.xml" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Include the bean for sqlSession</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"&gt;
</span><span class='line'>  &lt;constructor-arg index="0" ref="sqlSessionFactory" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next and finally, include the bean for MapperScannerConfigurer</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;
</span><span class='line'>  &lt;property name="basePackage" value="com.github.elizabetht.mappers" /&gt;
</span><span class='line'>&lt;/bean&gt;</span></code></pre></td></tr></table></div></figure>


<h2>5. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;jsp&rdquo; under WEB-INF (This is where the jsp files will be created as indicated in the springConfig.xml for the InternalResourceViewResolver bean).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/signup.png" title="MyBatis Signup Layout" alt="MyBatis Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="http://elizabetht.github.io/images/login.png" title="MyBatis Login Layout" alt="MyBatis Login Layout" /></p>

<p>Also create success.jsp to indicate the login success and failure.jsp to indicate login failure (These are just pages used to display the contents &ndash; no processing logic involved).</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under webapp folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithMyBatis/tree/master/src/main/webapp">https://github.com/elizabetht/StudentEnrollmentWithMyBatis/tree/master/src/main/webapp</a></p>

<h2>6. Create packages for Controller, Model, Service and Mappers</h2>

<p>Create packages each for the Spring Controller, Model and Service classes under the src/main/java folder. Also create a package for the MyBatis Mapper class under the same src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="http://elizabetht.github.io/images/mybatis-package.png" title="MyBatis Package Layout" alt="MyBatis Package Layout" /></p>

<h2>7. Create classes for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity during signup. Create another POJO class named StudentLogin.java inside the same package com.github.elizabetht.model to include the Student Login details.</p>

<p>A reference link to the files for the Model classes can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithMyBatis/tree/master/src/main/java/com/github/elizabetht/model">https://github.com/elizabetht/StudentEnrollmentWithMyBatis/tree/master/src/main/java/com/github/elizabetht/model</a></p>

<h2>8. Create classes for MyBatis Mapper</h2>

<p>A Mapper in MyBatis framework is similar to the Repository tier in a Spring environment. Crude SQL queries takes its place here.
Create an interface class named StudentMapper.java inside the package com.github.elizabetht.mapper to support the database operations.</p>

<p>There are two interface methods needed for the application&rsquo;s purpose.</p>

<ul>
<li>To Insert the Student Signup details into the Database</li>
<li>To Verify the Student Login details from the Database</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentMapper {
</span><span class='line'>  @Insert("INSERT INTO student(userName, password, firstName,"
</span><span class='line'>          + "lastName, dateOfBirth, emailAddress) VALUES"
</span><span class='line'>          + "(#{userName},#{password}, #{firstName}, #{lastName},"
</span><span class='line'>          + "#{dateOfBirth}, #{emailAddress})")
</span><span class='line'>  @Options(useGeneratedKeys=true, keyProperty="id", flushCache=true, keyColumn="id")
</span><span class='line'>  public void insertStudent(Student student);
</span><span class='line'>      
</span><span class='line'>  @Select("SELECT USERNAME as userName, PASSWORD as password, "
</span><span class='line'>          + "FIRSTNAME as firstName, LASTNAME as lastName, "
</span><span class='line'>          + "DATEOFBIRTH as dateOfBirth, EMAILADDRESS as emailAddress "
</span><span class='line'>          + "FROM student WHERE userName = #{userName}")
</span><span class='line'>  public Student getStudentByUserName(String userName);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>9. Create classes for Service Tier</h2>

<p>Create an interface class named StudentService.java inside the package com.github.elizabetht.service to support the service tier operations.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface StudentService {
</span><span class='line'>  void insertStudent(Student student);
</span><span class='line'>  boolean getStudentByLogin(String userName, String password);
</span><span class='line'>  boolean getStudentByUserName(String userName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Create a service tier implementation class (a POJO indeed) named StudentServiceImpl.java inside the package com.github.elizabetht.service. This is where the application logic goes &ndash; either to save the student details into the database or to verify the student (already saved) details from the database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Service("studentService")
</span><span class='line'>public class StudentServiceImpl implements StudentService {
</span><span class='line'>
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentMapper studentMapper;
</span><span class='line'>  
</span><span class='line'>  @Transactional
</span><span class='line'>  public void insertStudent(Student student) {        
</span><span class='line'>      studentMapper.insertStudent(student);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean getStudentByLogin(String userName, String password) {        
</span><span class='line'>      Student student = studentMapper.getStudentByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(student != null && student.getPassword().equals(password)) {
</span><span class='line'>          return true;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public boolean getStudentByUserName(String userName) {
</span><span class='line'>      Student student = studentMapper.getStudentByUserName(userName);
</span><span class='line'>      
</span><span class='line'>      if(student != null) {
</span><span class='line'>          return true;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      return false;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<blockquote><p>When using MyBatis with Spring, a mapper can be directly injected into the service tier. This is probably the strongest point of the Spring integration of MyBatis. This is the only tool that I am aware that lets to build the application with no imports to it.</p><footer><strong>@EduardoMacarron</strong> <cite><a href='https://twitter.com/EduardoMacarron'>twitter.com/EduardoMacarron/&hellip;</a></cite></footer></blockquote>


<h2>10. Create class for Controller Tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the routing logic of the application goes &ndash; whether a signup or login action is called.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Controller
</span><span class='line'>@SessionAttributes("student")
</span><span class='line'>public class StudentController {
</span><span class='line'>  
</span><span class='line'>  @Autowired
</span><span class='line'>  private StudentService studentService;
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/signup", method=RequestMethod.GET)
</span><span class='line'>  public String signup(Model model) {
</span><span class='line'>      Student student = new Student();
</span><span class='line'>      model.addAttribute("student", student);
</span><span class='line'>      return "signup";
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/signup", method=RequestMethod.POST)
</span><span class='line'>  public String signup(@ModelAttribute("student") Student student, Model model) {
</span><span class='line'>      if(studentService.getStudentByUserName(student.getUserName())) {
</span><span class='line'>          model.addAttribute("message", "User Name exists. Try another user name");
</span><span class='line'>          return "signup";
</span><span class='line'>      } else {
</span><span class='line'>          studentService.insertStudent(student);
</span><span class='line'>          model.addAttribute("message", "Saved student details");
</span><span class='line'>          return "redirect:login.html";
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/login", method=RequestMethod.GET)
</span><span class='line'>  public String login(Model model) {
</span><span class='line'>      StudentLogin studentLogin = new StudentLogin();
</span><span class='line'>      model.addAttribute("studentLogin", studentLogin);
</span><span class='line'>      return "login";
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  @RequestMapping(value="/login", method=RequestMethod.POST)
</span><span class='line'>  public String login(@ModelAttribute("studentLogin") StudentLogin studentLogin) {
</span><span class='line'>      boolean found = studentService.getStudentByLogin(studentLogin.getUserName(), studentLogin.getPassword());
</span><span class='line'>      if (found) {                
</span><span class='line'>          return "success";
</span><span class='line'>      } else {                
</span><span class='line'>          return "failure";
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>11. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the dataSource bean in springConfig.xml</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE TABLE `student` (
</span><span class='line'>  `id` bigint(20) NOT NULL AUTO_INCREMENT,
</span><span class='line'>  `dateOfBirth` datetime NOT NULL,
</span><span class='line'>  `emailAddress` varchar(255) NOT NULL,
</span><span class='line'>  `firstName` varchar(255) NOT NULL,
</span><span class='line'>  `lastName` varchar(255) NOT NULL,
</span><span class='line'>  `password` varchar(8) NOT NULL,
</span><span class='line'>  `userName` varchar(20) NOT NULL,
</span><span class='line'>  PRIMARY KEY (`id`)
</span><span class='line'>) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;</span></code></pre></td></tr></table></div></figure>


<h2>12. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithMyBatis/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithMyBatis/</a></p>

<h2>13. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithMyBatis.git">https://github.com/elizabetht/StudentEnrollmentWithMyBatis.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithMyBatis/releases/tag/1.7">https://github.com/elizabetht/StudentEnrollmentWithMyBatis/releases/tag/1.7</a></p>
]]></content>
  </entry>
  
</feed>
