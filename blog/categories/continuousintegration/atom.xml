<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ContinuousIntegration | My Experiments with Java]]></title>
  <link href="http://elizabetht.github.io/blog/categories/continuousintegration/atom.xml" rel="self"/>
  <link href="http://elizabetht.github.io/"/>
  <updated>2014-01-16T09:28:51-06:00</updated>
  <id>http://elizabetht.github.io/</id>
  <author>
    <name><![CDATA[Elizabeth Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Java Web Applications Using Jenkins Continuous Integration]]></title>
    <link href="http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration/"/>
    <updated>2014-01-13T16:50:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration</id>
    <content type="html"><![CDATA[<p>This post will show how to automate the deployment process of a Java Web Application (Student Enrollment Application developed using MYSQL DB with Hibernate ORM in a REST based Jersey2 Spring environment) using Jenkins Continuous Integration &ndash; to build the project, run the unit tests, upload the built artifacts to a Sonatype Snapshot repository, run the Cobertura Code Coverage reports and deploy the application to the Amazon EC2. The details of the actual application are explained in the earlier post given by the link <a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>.</p>

<h2>1. Install Jenkins as a Windows Service</h2>

<p>Navigate to jenkins-ci.org website using an Internet browser and download the Windows native package (the link is underlined for easy identification) as shown from the right side pane of the Download Jenkins tab.</p>

<p><img src="/images/jenkins-installation.png" title="Jenkins Installation Package" alt="Jenkins Installation package" /></p>

<p>Once the download is complete, uncompress the zip file and click on the jenkins-1.xxx.msi file. Proceed through the configuration steps to install the Jenkins as a Windows service.</p>

<h2>2. Modify Default Jenkins Port</h2>

<p>By default Jenkins runs on the port 8080. In order to avoid conflict with other applications, the default port can be modified by editing the jenkins.xml found under C:\Program Files (x86)\Jenkins location. As shown below, modify the httpPort to 8082.</p>

<p>```
<service>
  <id>jenkins</id>
  <name>Jenkins</name>
  <description>This service runs Jenkins continuous integration system.</description>
  <env name="JENKINS_HOME" value="%BASE%"/>
  &lt;!&mdash;</p>

<pre><code>if you'd like to run Jenkins with a specific version of Java, specify a full path to java.exe.
The following value assumes that you have java in your PATH.
</code></pre>

<p>  &mdash;>
  <executable>%BASE%\jre\bin\java</executable>
  <arguments>-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar &ldquo;%BASE%\jenkins.war&rdquo; &mdash;httpPort=8082</arguments>
  &lt;!&mdash;</p>

<pre><code>interactive flag causes the empty black Java window to be displayed.
I'm still debugging this.
</code></pre>

<p>  <interactive />
  &mdash;>
  <logmode>rotate</logmode></p>

<p>  <onfailure action="restart" />
</service>
```</p>

<p>Once the modification is saved in jenkins.xml file, restart the Jenkins service from the Windows Task Manager->Services and right clicking on the Jenkins service and choose Stop Service to stop the service as shown below.</p>

<p><img src="/images/jenkins-stop.png" title="Jenkins Stop Service" alt="Jenkins Stop Service" /></p>

<p>Once the status of the service changes to stopped, restart the service by right clicking on the Jenkins service and choose Start Service to start the service again.</p>

<p><img src="/images/jenkins-restart.png" title="Jenkins Restart Service" alt="Jenkins Restart Service" /></p>

<p>Navigate to localhost:8082 to verify if the Jenkins restart was successful as shown below &ndash; Jenkins Dashboard will be displayed. Note that it takes a while before the Jenkins service becomes available.</p>

<p><img src="/images/jenkins-dashboard.png" title="Jenkins Dashboard" alt="Jenkins Dashboard" /></p>

<h2>3. Install the Plugins</h2>

<p>On the Jenkins Dashboard, navigate to Manage Plugins &ndash;> Manage Plugins as shown in the snapshot below.</p>

<p><img src="/images/jenkins-manageplugins.png" title="Jenkins Manage Plugins" alt="Jenkins Manage Plugins" /></p>

<p>Install the following plugins and restart Jenkins for the changes to take effect.</p>

<ul>
<li>GitHub Plugin (for integrating Github with Jenkins)</li>
<li>Jenkins Cobertura Plugin (for Cobertura support)</li>
<li>Deploy to Container Plugin (for deploying the WAR to the Tomcat Container on EC2 instance)</li>
<li>Jenkins Artifactory Plugin (for deploying the built Maven artifacts to the Snapshot repository)</li>
</ul>

]]></content>
  </entry>
  
</feed>
