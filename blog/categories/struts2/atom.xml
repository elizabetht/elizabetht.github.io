<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Struts2, | My Experiments with Java]]></title>
  <link href="http://elizabetht.github.io/blog/categories/struts2/atom.xml" rel="self"/>
  <link href="http://elizabetht.github.io/"/>
  <updated>2013-11-26T15:39:24-06:00</updated>
  <id>http://elizabetht.github.io/</id>
  <author>
    <name><![CDATA[Elizabeth Thomas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Student Enrollment Using Struts 2]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2/"/>
    <updated>2013-11-21T09:41:45-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Struts 2 framework. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<h2>1. Create Java Web Application Project using Maven Template</h2>

<p>To begin with, in the IDE, create a Java Dynamic Web project for the application. While creating the dynamic web project, enable the checkbox to generate web.xml deployment descriptor.</p>

<p>The sample web application directory structure is shown below with a standard deployment descriptor web.xml</p>

<p><img src="/images/strutslayout.png" title="Struts Dynamic Web Project Layout" alt="Struts Dynamic Web Project Layout" /></p>

<h2>2. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A Struts Dispatcher named Struts Prepare and Execute Filter to handle both the preparation and execution phases of Struts dispatching process.</li>
<li>A Filter mapping to map the dispatcher created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;web-app xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo; xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a>&rdquo; xmlns:web=&ldquo;<a href="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd</a>&rdquo; xsi:schemaLocation=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a> <a href="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd</a>&rdquo; id=&ldquo;WebApp_ID&rdquo; version=&ldquo;3.0&rdquo;>
  &lt;display-name>StudentEnrollmentWithStruts&lt;/display-name>
  <filter></p>

<pre><code>      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
</code></pre>

<p>  </filter>
  &lt;filter-mapping></p>

<pre><code>      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p>  &lt;/filter-mapping><br/>
&lt;/web-app>
```</p>

<h2>3. Add JARs to the project</h2>

<p>Add the following JARs from the web (or their latest equivalent) to the WEB-INF/lib folder under WebContent directory in the project.</p>

<ul>
<li>asm-3.3.jar (for bytecode manipulation framework support)</li>
<li>asm-commons-3.3.jar (for bytecode manipulation framework support)</li>
<li>commons-fileupload-1.3.jar (for file upload capability to your servlets and web applications support)</li>
<li>commons-io-2.0.1.jar (for library of utilities to assist with developing IO functionality)</li>
<li>commons-lang-2.4.jar (for manipulation of core classes by providing helper utilities)</li>
<li>commons-lang3-3.1.jar (for manipulation of core classes by providing helper utilities)</li>
<li>freemarker-2.3.19.jar (for UI tag templates support)</li>
<li>javassist-3.11.0.GA.jar (for JAVA programming ASSISTance support)</li>
<li>mysql-connector-java-5.1.26-bin.jar (for MYSQL data access support)</li>
<li>ognl-3.0.6.jar (for Object Graph Navigation Language (OGNL) support)</li>
<li>struts2-bootstrap-plugin-1.6.1.jar (for Bootstrap support)</li>
<li>struts2-convention-plugin-2.3.15.1.jar (for the zero configuration and naming convention support)</li>
<li>struts2-core-2.3.15.1.jar (for Struts Framework library support)</li>
<li>struts2-jquery-plugin-3.6.1.jar (for JQuery support)</li>
<li>xwork-core-2.3.15.1.jar (for XWork 2 library support)</li>
</ul>


<p>The sample lib folder structure is shown below with the necessary JARs added for the project.</p>

<p><img src="/images/strutsliblayout.png" title="Struts Library Layout" alt="Struts Library Layout" /></p>

<h2>4. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;content&rdquo; under WEB-INF (This is where the jsp files will be created).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="/images/struts-signup.png" title="Struts Signup Layout" alt="Struts Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="/images/login.png" title="Struts Login Layout" alt="Struts Login Layout" /></p>

<p>The main actions for this application are as follows:</p>

<ul>
<li>Signup (To Insert the Student Signup details into the Database)</li>
<li>Login (To Verify the Student Login details from the Database)</li>
</ul>


<p>In order to display a success (result) page after the login action is complete, create a login-success.jsp page to indicate the login success (The page name will follow the semantics: &lt;action name&gt;&ndash;&lt;result name&gt;.jsp). Similarly, to indicate a login failure (result), create a page login-failure.jsp (login is the action and failure is the result). Also create a signup-failure.jsp page to indicate the signup failure, possibly due to an already existing username (signup is the action and failure is the result). These are just pages used to display the contents &ndash; no processing logic involved.</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets.</p>

<p>The Struts 2 UI component tags are used to create the page elements like the form, textfield, password and hidden fields. The Struts Bootstrap tags are used for the Twitter Bootstrap integration. The Struts jQuery tags are used to include the AJAX functionality of submitting the form outside from the modal window and to use the UI widgets like the datepicker.</p>

<p>A reference link to the files under webapp folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent">https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent</a></p>

<h2>5. Create packages</h2>

<p>Create packages each for the Struts Controller, Model and DAO (Data Access Objects, equivalent to the repository tier) classes under the src folder.
Also create packages for the Struts action classes and for the utilities classes under the src folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/struts-package.png" title="Struts Package Layout" alt="Struts Package Layout" /></p>

<h2>6. Create class for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.meygam.model to include the details of the Student model entity.</p>

<p>```
public class Student {</p>

<pre><code>private String userName;
private String firstName;
private String lastName;
private String password;
private String emailAddress;
private Date dateOfBirth;

public String getUserName() {
    return userName;
}
public void setUserName(String userName) {
    this.userName = userName;
}
public String getFirstName() {
    return firstName;
}
public void setFirstName(String firstName) {
    this.firstName = firstName;
}
public String getLastName() {
    return lastName;
}
public void setLastName(String lastName) {
    this.lastName = lastName;
}
public String getPassword() {
    return password;
}
public void setPassword(String password) {
    this.password = password;
}
public String getEmailAddress() {
    return emailAddress;
}
public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
}
public Date getDateOfBirth() {
    return dateOfBirth;
}
public void setDateOfBirth(Date dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
}   
</code></pre>

<p>}
```</p>

<h2>7. Create db.properties file</h2>

<p>Create a file named db.properties under the src folder, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<p><code>
dbDriver=com.mysql.jdbc.Driver
connectionUrl=jdbc:mysql://&lt;include connection url&gt;:3306/studentEnrollment
userName=&lt;include username&gt;
password=&lt;include password&gt;
</code></p>

<h2>8. Create utility class for DAO tier</h2>

<p>Create a POJO class named DbUtil.java under the package com.meygam.util to include a helper class functionality that would load the db.properties file and get the database connection.</p>

<p>```
public class DbUtil {</p>

<pre><code>private static Connection dbConnection = null;

public static Connection getConnection() {
    if (dbConnection != null) {
        return dbConnection;
    } else {
        try {
        InputStream inputStream = DbUtil.class.getClassLoader().getResourceAsStream("db.properties");
        Properties properties = new Properties();
        if (properties != null) {
            properties.load(inputStream);

            String dbDriver = properties.getProperty("dbDriver");
            String connectionUrl = properties.getProperty("connectionUrl");
            String userName = properties.getProperty("userName");
            String password = properties.getProperty("password");

            Class.forName(dbDriver).newInstance();              
            dbConnection = DriverManager.getConnection(connectionUrl, userName, password);              
        }   
        } catch (Exception e) {
            e.printStackTrace();
        } 
        return dbConnection;
    }
}
</code></pre>

<p>}
```</p>

<h2>9. Create class for DAO tier</h2>

<p>Create a DAO tier POJO class named StudentDao.java under the package com.meygam.dao to support the database operations of saving the student details, verifying the student login details and checking if the username exists when a save is attempted.</p>

<p>```
public class StudentDao {</p>

<pre><code>private Connection dbConnection;

public StudentDao() {
    dbConnection = DbUtil.getConnection();
}

public void addStudent(Student student) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("insert into student(userName, firstName, lastName, password, emailAddress, dateOfBirth) values (?, ?, ?, ?, ?, ?)");
        prepStatement.setString(1, student.getUserName());
        prepStatement.setString(2, student.getFirstName());
        prepStatement.setString(3, student.getLastName());
        prepStatement.setString(4, student.getPassword());
        prepStatement.setString(5, student.getEmailAddress());
        prepStatement.setDate(6, new Date(student.getDateOfBirth().getTime()));

        prepStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

public boolean checkUserName(String userName) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("select count(*) from student where userName = ?");
        prepStatement.setString(1, userName);   

        ResultSet result = prepStatement.executeQuery();
        if (result != null) {   
            while (result.next()) {
                if (result.getInt(1) == 1) {
                    return true;
                }               
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}

public boolean verifyStudent(String userName, String password) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("select password from student where userName = ?");
        prepStatement.setString(1, userName);           

        ResultSet result = prepStatement.executeQuery();
        if (result != null) {
            while (result.next()) {
                if (result.getString(1).equals(password)) {
                    return true;
                }
            }               
        }           
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>}
```</p>

<h2>10. Create class for Controller Tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.meygam.controller.</p>

<p>If you are using git, you can clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts.git">https://github.com/elizabetht/StudentEnrollmentWithStruts.git</a></p>

<p>In case you are not using git, you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.1">https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.1</a></p>
]]></content>
  </entry>
  
</feed>
