<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | My Experiments with Technology]]></title>
  <link href="http://elizabetht.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://elizabetht.github.io/"/>
  <updated>2014-01-30T14:09:13-06:00</updated>
  <id>http://elizabetht.github.io/</id>
  <author>
    <name><![CDATA[Elizabeth Thomas]]></name>
    <email><![CDATA[email2eliza@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying Java Web Applications Using Jenkins Continuous Integration]]></title>
    <link href="http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration/"/>
    <updated>2014-01-13T16:50:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2014/01/13/jenkins-continuous-integration</id>
    <content type="html"><![CDATA[<p>This post will show how to automate the deployment process of a Java Web Application (Student Enrollment Application developed using MYSQL DB with Hibernate ORM in a REST based Jersey2 Spring environment) using Jenkins Continuous Integration &ndash; to build the project, run the unit tests, upload the built artifacts to a Sonatype Snapshot repository, run the Cobertura Code Coverage reports and deploy the application to the Amazon EC2. The details of the actual application are explained in the earlier post given by the link <a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>.</p>

<!-- more -->


<h2>1. Install Jenkins as a Windows Service</h2>

<p>Navigate to jenkins-ci.org website using an Internet browser and download the Windows native package (the link is underlined for easy identification) as shown from the right side pane of the Download Jenkins tab.</p>

<p><img src="/images/jenkins-installation.png" title="Jenkins Installation Package" alt="Jenkins Installation package" /></p>

<p>Once the download is complete, uncompress the zip file and click on the jenkins-1.xxx.msi file. Proceed through the configuration steps to install the Jenkins as a Windows service.</p>

<h2>2. Modify Default Jenkins Port</h2>

<p>By default Jenkins runs on the port 8080. In order to avoid conflict with other applications, the default port can be modified by editing the jenkins.xml found under C:\Program Files (x86)\Jenkins location. As shown below, modify the httpPort to 8082.</p>

<p>```
<service>
  <id>jenkins</id>
  <name>Jenkins</name>
  <description>This service runs Jenkins continuous integration system.</description>
  <env name="JENKINS_HOME" value="%BASE%"/>
  &lt;!&mdash;</p>

<pre><code>if you'd like to run Jenkins with a specific version of Java, specify a full path to java.exe.
The following value assumes that you have java in your PATH.
</code></pre>

<p>  &mdash;>
  <executable>%BASE%\jre\bin\java</executable>
  <arguments>-Xrs -Xmx256m -Dhudson.lifecycle=hudson.lifecycle.WindowsServiceLifecycle -jar &ldquo;%BASE%\jenkins.war&rdquo; &mdash;httpPort=8082</arguments>
  &lt;!&mdash;</p>

<pre><code>interactive flag causes the empty black Java window to be displayed.
I'm still debugging this.
</code></pre>

<p>  <interactive />
  &mdash;>
  <logmode>rotate</logmode></p>

<p>  <onfailure action="restart" />
</service>
```</p>

<p>Once the modification is saved in jenkins.xml file, restart the Jenkins service from the Windows Task Manager->Services and right clicking on the Jenkins service and choose Stop Service to stop the service as shown below.</p>

<p><img src="/images/jenkins-stop.png" title="Jenkins Stop Service" alt="Jenkins Stop Service" /></p>

<p>Once the status of the service changes to stopped, restart the service by right clicking on the Jenkins service and choose Start Service to start the service again.</p>

<p><img src="/images/jenkins-restart.png" title="Jenkins Restart Service" alt="Jenkins Restart Service" /></p>

<p>Navigate to localhost:8082 to verify if the Jenkins restart was successful as shown below &ndash; Jenkins Dashboard will be displayed. Note that it takes a while before the Jenkins service becomes available.</p>

<p><img src="/images/jenkins-dashboard.png" title="Jenkins Dashboard" alt="Jenkins Dashboard" /></p>

<h2>3. Install Plugins</h2>

<p>On the Jenkins Dashboard, navigate to Manage Jenkins &ndash;> Manage Plugins as shown in the snapshot below.</p>

<p><img src="/images/jenkins-manageplugins.png" title="Jenkins Manage Plugins" alt="Jenkins Manage Plugins" /></p>

<p>Install the following plugins and restart Jenkins for the changes to take effect.</p>

<ul>
<li>GitHub Plugin (for integrating Github with Jenkins)</li>
<li>Jenkins Cobertura Plugin (for Cobertura support)</li>
<li>Deploy to Container Plugin (for deploying the WAR to the Tomcat Container on EC2 instance)</li>
<li>Jenkins Artifactory Plugin (for deploying the built Maven artifacts to the Snapshot repository)</li>
</ul>


<h2>4. Configure System</h2>

<p>On the Jenkins Dashboard, navigate to Manage Jenkins &ndash;> Configure System as shown in the snapshot below.</p>

<p><img src="/images/jenkins-configuresystem.png" title="Jenkins Configure System" alt="Jenkins Configure System" /></p>

<p>Navigate to the JDK section and click on &ldquo;Add JDK&rdquo; to add the JDK installation as shown in the snapshot below. Specify a JDK Name, choose the JDK Version to install and follow the on-screen instructions to save the Oracle Login credentials. Save the changes.</p>

<p><img src="/images/jenkins-java.png" title="Jenkins Java Installation" alt="Jenkins Java Installation" /></p>

<p>Next, proceed to the Maven section and click on &ldquo;Add Maven&rdquo; to add the Maven installation as shown in the snapshot below. Specify Maven Name, choose the Maven Version to install and Save the changes.</p>

<p><img src="/images/jenkins-maven.png" title="Jenkins Maven Installation" alt="Jenkins Maven Installation" /></p>

<p>Proceed to the Git plugin section and enter the values for Github Username and Email Address as credentials as shown below. Save the changes.</p>

<p><img src="/images/jenkins-git.png" title="Jenkins Gitplugin Credentials" alt="Jenkins Gitplugin Credentials" /></p>

<p>Proceed to the Artifactory section and click on &ldquo;Add&rdquo; to add the information about the artifactory servers. Specify the URL for the snapshot repository and provide the deployer credentials created from the Artifactory server website as shown below. Click on &ldquo;Test Connection&rdquo; to test if the connection parameters are good to save and Save the changes.</p>

<p><img src="/images/jenkins-artifactory.png" title="Jenkins Artifactory Servers Configuration" alt="Jenkins Artifactory Servers Configuration" /></p>

<p>Next, proceed to the Email Notification section and enter the SMTP Server details as shown below. Click on the Advanced button to add the further details required and Save the changes. Click on &ldquo;Test configuration by sending test e-mail&rdquo;, enter the test e-mail recipient and click on &ldquo;Test configuration&rdquo; to see if the email is successfully sent.</p>

<p><img src="/images/jenkins-email.png" title="Jenkins Email Notification" alt="Jenkins Email Notification" /></p>

<h2>5. Create a New Jenkins Job</h2>

<p>From the Jenkins Dashboard, click on &ldquo;New Job&rdquo; to create a new job. Enter a name for the job and choose &ldquo;Build a maven2/3 project&rdquo; as option and click on OK as shown below.</p>

<p><img src="/images/jenkins-newjob.png" title="Jenkins New Job" alt="Jenkins New Job" /></p>

<p>From the New Job Configuration screen, proceed to the Source Code Management section and specify the Git Repository URL for the project as shown below. Save the changes.</p>

<p><img src="/images/jenkins-sourcecodemgmt.png" title="Jenkins Source Code Management" alt="Jenkins Source Code Management" /></p>

<p>Next, from the Build Triggers section, select the options desired as shown below and Save the changes.</p>

<p><img src="/images/jenkins-buildtriggers.png" title="Jenkins Build Triggers" alt="Jenkins Build Triggers" /></p>

<p>Proceed to the Build section, enter the maven goals for building a snapshot as shown below and Save the changes.</p>

<p><img src="/images/jenkins-build.png" title="Jenkins Build" alt="Jenkins Build" /></p>

<p>Proceed to the Build Settings section. Select the option for Email Notification and enter the values for the email recipients as shown below. Save the changes.</p>

<p><img src="/images/jenkins-emailnotifications.png" title="Jenkins Email Notifications" alt="Jenkins Email Notifications" /></p>

<p>Under the Post-build Actions, click on &ldquo;Add post-build action&rdquo; button and select &ldquo;Deploy war/ear to a container&rdquo;. In the Amazon EC2, a Tomcat Manager (manager as username) instance has to be configured with roles manager-gui and manager-script to allow the remote deployment of the WAR/EAR to the Tomcat Container. The configuration steps can be found in the link <a href="https://help.ubuntu.com/13.04/serverguide/tomcat.html">https://help.ubuntu.com/13.04/serverguide/tomcat.html</a> under the section of &ldquo;Tomcat administration webapps&rdquo;</p>

<p>Once the Tomcat Manager webapp configuration is complete in the Amazon EC2 instance, enter the details necessary for the deployment as shown below. Save the changes.</p>

<p><img src="/images/jenkins-deploy.png" title="Jenkins Deployment" alt="Jenkins Deployment" /></p>

<p>Similarly, from the Post-build Actions, click on &ldquo;Add post-build action&rdquo; button and select &ldquo;Publish Cobertura Coverage Report&rdquo;. Enter the Cobertura XML Report Pattern as shown below and save the changes.</p>

<p><img src="/images/jenkins-cobertura.png" title="Jenkins Cobertura Coverage Report" alt="Jenkins Cobertura Coverage Report" /></p>

<h2>6. Configure settings.xml</h2>

<p>In order to upload the built Maven artifacts to the artifactory server, configure the Jenkins settings.xml found in C:\Program Files (x86)\Jenkins\tools\hudson.tasks.Maven_MavenInstallation\Maven_3.1\conf folder with the same parameters as found in the default settings.xml (usually found under C:\Program Files\Apache Software Foundation\apache-maven-3.1.0\conf for a Windows machine) of the Maven installation on the system.</p>

<p>Typically, the server, mirror and profile section needs to be configured in the settings.xml for Jenkins matching with the details of the Artifactory server.</p>

<h2>7. Update pom.xml</h2>

<p>The pom.xml file for the project needs to be configured with the following plugins under the build section for the deployment to snapshot repository and for running the Cobertura Coverage report.</p>

<ul>
<li>maven-compiler plugin</li>
<li>maven-deploy-plugin</li>
<li>cobertura-maven-plugin</li>
</ul>


<p>Also add parent, scm and developer section to comply with the requirements put forth by the Artifactory server management as shown below.</p>

<p>```
<parent></p>

<pre><code>    &lt;groupId&gt;org.sonatype.oss&lt;/groupId&gt;
    &lt;artifactId&gt;oss-parent&lt;/artifactId&gt;
    &lt;version&gt;7&lt;/version&gt;
&lt;/parent&gt;

&lt;scm&gt;
    &lt;connection&gt;scm:git:git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/connection&gt;
    &lt;developerConnection&gt;scm:git:git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/developerConnection&gt;
    &lt;url&gt;git@github.com:elizabetht/StudentEnrollmentWithREST.git&lt;/url&gt;
    &lt;tag&gt;StudentEnrollmentWithREST-1.3&lt;/tag&gt;
&lt;/scm&gt;
&lt;developers&gt;
    &lt;developer&gt;
        &lt;id&gt;elizabetht&lt;/id&gt;
        &lt;name&gt;Elizabeth Thomas&lt;/name&gt;
        &lt;email&gt;email2eliza@gmail.com&lt;/email&gt;
    &lt;/developer&gt;
&lt;/developers&gt;

&lt;build&gt;
    &lt;finalName&gt;StudentEnrollmentWithREST&lt;/finalName&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.5.1&lt;/version&gt;
            &lt;inherited&gt;true&lt;/inherited&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.6&lt;/source&gt;
                &lt;target&gt;1.6&lt;/target&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;

        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.8.1&lt;/version&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;default-deploy&lt;/id&gt;
                    &lt;phase&gt;deploy&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;deploy&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;                   

        &lt;plugin&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.6&lt;/version&gt;
            &lt;configuration&gt;
                &lt;formats&gt;
                    &lt;format&gt;html&lt;/format&gt;
                    &lt;format&gt;xml&lt;/format&gt;
                &lt;/formats&gt;
            &lt;/configuration&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;cobertura&lt;/goal&gt;
                    &lt;/goals&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

<p>```</p>

<h2>8. Build Now</h2>

<p>Once the above configuration steps are complete, click on &ldquo;Build Now&rdquo; under the Jenkins &ndash;> Upload REST Snapshot Artifacts (or the respective Job name) to build the project based on the configuration.</p>

<p>The console output has the detailed logs of what steps were initiated by the configuration and the outcome of the entire build.</p>

<p>The timestamp of the WAR deployed to Amazon EC2 instance can be checked to see if the deployment is successful. In the same way, the snapshot repository can be checked to see if the upload of the artifacts is successful.</p>

<p>Thus the entire process of building the project along with unit tests whenever a SCM change is triggered or under another condition, running code coverage reports, uploading the artifacts built to the snapshot artifactory repository, deploying the WAR to the remote server container and triggering emails to the recipients can be automated with a click of a button through Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Jersey2 REST Client Using Spring With JUnit and JMock]]></title>
    <link href="http://elizabetht.github.io/blog/2013/12/23/jersey2-rest-client-with-junit-and-jmock/"/>
    <updated>2013-12-23T12:10:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/12/23/jersey2-rest-client-with-junit-and-jmock</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Jersey2 REST Client in a Spring environment and test the same using JUnit and JMock frameworks. The details of the actual application are explained in the earlier post given by the link <a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>.</p>

<!-- more -->


<h2>1. Update pom.xml</h2>

<p>To make the Maven Java Web Application project (<a href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/">Building Java Web Application Using Jersey REST With Spring</a>) support the JUnit testing framework, add the following dependency to the existing pom.xml</p>

<p>```
<dependency></p>

<pre><code>&lt;groupId&gt;org.jmock&lt;/groupId&gt;
&lt;artifactId&gt;jmock-junit4&lt;/artifactId&gt;
&lt;version&gt;2.6.0&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<h2>2. Create packages for Client tier classes</h2>

<p>Create package for the Jersey Client classes under the src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/jersey-client-package.png" title="Jersey REST Client Package Layout" alt="Jersey REST Client Package Layout" /></p>

<h2>3. Create classes for Client tier</h2>

<p>Create an interface class named StudentClientInterface.java inside the package com.github.elizabetht.client to support the client operations.</p>

<p>```
public interface StudentClientInterface {</p>

<pre><code>public Response getSignup();

public Response postSignup(String userName, String password,
        String firstName, String lastName, String dateOfBirth,
        String emailAddress) throws Exception;

public Response getLogin();

public Response postLogin(String userName, String password);
</code></pre>

<p>}
```</p>

<p>Create a client tier implementation class (a POJO indeed) named StudentClient.java inside the package com.github.elizabetht.client. This is where the client logic goes &ndash; either to access the GET/POST methods in the StudentResource.java class.</p>

<p>```
public class StudentClient implements StudentClientInterface {</p>

<pre><code>private WebTarget target;

public StudentClient(WebTarget target) {
    this.target = target;
}

public Response getSignup() {       
    Response response = target.path("signup").request().get(Response.class);
    return response;
}

public Response postSignup(String userName, String password,
        String firstName, String lastName, String dateOfBirth,
        String emailAddress) throws Exception {

    Form form = new Form().param("userName", userName)
            .param("password", password).param("firstName", firstName)
            .param("lastName", lastName).param("dateOfBirth", dateOfBirth)
            .param("emailAddress", emailAddress);
    Response response = target.path("signup").request()
            .post(Entity.form(form));

    if (response.getStatus() == Status.INTERNAL_SERVER_ERROR
            .getStatusCode()) {
        throw new Exception();
    }

    if (response.getStatus() != Status.OK.getStatusCode()) {
        throw new RuntimeException();
    }

    return response;
}

public Response getLogin() {
    Response response = target.path("login").request().get(Response.class);

    return response;
}

public Response postLogin(String userName, String password) {
    Form form = new Form().param("userName", userName).param("password",
            password);

    Response response = target.path("login").request()
            .post(Entity.form(form));

    if (response.getStatus() != Status.OK.getStatusCode()) {
        throw new RuntimeException();
    }

    return response;
}
</code></pre>

<p>}
```</p>

<h2>4. Create packages for Client Test tier classes</h2>

<p>Create package for the Client Test classes by right-clicking on the StudentClient.java class and choosing &ldquo;New->JUnit Test Case&rdquo; option. Specify the source folder as StudentEnrollmentWithREST/src/test/java folder (create the src/test/java folder if the folder does not exist) and specify the name for the test class.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/jersey-client-test-package.png" title="Jersey REST Client Test Package Layout" alt="Jersey REST Client Test Package Layout" /></p>

<h2>5. Extract Interfaces for Model and Resource tier classes</h2>

<p>In order to support the use of JMock mocking framework alongside JUnit test cases, extract the interfaces out of the Model(Student.java) and Resource (StudentResource.java) tier classes. This is necessary in order to mock the objects.</p>

<p>Extracting interfaces can be done by right-clicking on the class file and choosing &ldquo;Refactor->Extract Interface&rdquo; option.</p>

<p>The StudentInterface.java (in src/main/java/com.github.elizabetht.model package) after the extraction looks as below.</p>

<p>```
public interface StudentInterface {</p>

<pre><code>public Long getId();

public void setId(Long id);

public String getUserName();

public void setUserName(String userName);

public String getFirstName();

public void setFirstName(String firstName);

public String getLastName();

public void setLastName(String lastName);

public String getPassword();

public void setPassword(String password);

public String getEmailAddress();

public void setEmailAddress(String emailAddress);

public Date getDateOfBirth();

public void setDateOfBirth(Date dateOfBirth);
</code></pre>

<p>}
```</p>

<p>Similarly, the StudentResourceInterface.java (in src/main/java/com.github.elizabetht.resource package) looks as below.</p>

<p>```
public interface StudentResourceInterface {</p>

<pre><code>public Response signup();

public Response signup(String userName, String password, String firstName,
        String lastName, String dateOfBirth, String emailAddress)
        throws ParseException;

public Response login();

public Response login(String userName, String password);
</code></pre>

<p>}
```</p>

<h2>6. Create Unit Test cases for StudentClient class</h2>

<p>As a part of unit testing, each of the unit must be testable individually. While in reality, each unit would depend on other modules. This is where JMock comes into picture &ndash; to help to test a unit individually by mocking the dependencies.</p>

<p>@Before annotation helps to define the environment that needs to be setup before running each test case. In this example, the context and mock objects are setup using the @Before annotation.</p>

<p>```
public class StudentClientUnitTest {</p>

<pre><code>private Mockery context;
private StudentClient studentClient;
private WebTarget target;
private Builder builder;

@Before
public void beforeEachTest() {
    context = new Mockery();
    studentClient = new StudentClient(
            ClientBuilder
                    .newClient()
                    .target("http://localhost:8080/StudentEnrollmentWithREST/webapi/studentResource/"));
    target = context.mock(WebTarget.class);
    builder = context.mock(Builder.class);
}

@Test
public void getSignupTest() {
    studentClient = new StudentClient(target);

    final Response response = Response.ok(new Viewable("/signup")).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).get(Response.class);
            will(returnValue(response));
        }
    });
    studentClient.getSignup();
    assertEquals(response.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}

@Test
public void postSignupTest() throws Exception {
    String userName = "jersey";
    String password = "jersey";
    String firstName = "jersey";
    String lastName = "jersey";
    String dateOfBirth = "12-21-2013";
    String emailAddress = "jersey@gmail.com";
    studentClient = new StudentClient(target);

    final Response response = Response.ok(new Viewable("/success")).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postSignup(userName, password, firstName, lastName,
            dateOfBirth, emailAddress);
    assertEquals(response.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}

@Test(expected = Exception.class)
public void postSignupInvalidDateFormatTest() throws Exception {
    String userName = "jersey";
    String password = "jersey";
    String firstName = "jersey";
    String lastName = "jersey";
    String dateOfBirth = "12/21/2013";
    String emailAddress = "jersey@gmail.com";
    studentClient = new StudentClient(target);

    final Response response = Response.status(Status.PRECONDITION_FAILED)
            .build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postSignup(userName, password, firstName, lastName,
            dateOfBirth, emailAddress);
    assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());

    context.assertIsSatisfied();
}

@Test(expected = Exception.class)
public void postSignupBadRequestTest() throws Exception {
    String userName = null;
    String password = null;
    String firstName = null;
    String lastName = null;
    String dateOfBirth = null;
    String emailAddress = null;
    studentClient = new StudentClient(target);

    final Response response = Response.status(Status.PRECONDITION_FAILED)
            .build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postSignup(userName, password, firstName, lastName,
            dateOfBirth, emailAddress);
    assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());

    context.assertIsSatisfied();
}

@Test(expected = RuntimeException.class)
public void postSignupExistingUserTest() throws Exception {
    String userName = "jersey";
    String password = "jersey";
    String firstName = "jersey";
    String lastName = "jersey";
    String dateOfBirth = "12/21/2013";
    String emailAddress = "jersey@gmail.com";
    studentClient = new StudentClient(target);

    final Response response = Response.status(Status.BAD_REQUEST).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postSignup(userName, password, firstName, lastName,
            dateOfBirth, emailAddress);
    assertEquals(response.getStatus(), Status.BAD_REQUEST.getStatusCode());

    context.assertIsSatisfied();
}

@Test
public void getLoginTest() {
    studentClient = new StudentClient(target);

    final Response response = Response.ok(new Viewable("/login")).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).get(Response.class);
            will(returnValue(response));
        }
    });
    studentClient.getLogin();
    assertEquals(response.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}

@Test
public void postLoginTest() {
    String userName = "jersey";
    String password = "jersey";
    studentClient = new StudentClient(target);

    final Response response = Response.ok(new Viewable("/success")).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postLogin(userName, password);
    assertEquals(response.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}

@Test(expected=RuntimeException.class)
public void postLoginInvalidTest() {
    String userName = "jersey";
    String password = "jersey123";
    studentClient = new StudentClient(target);

    final Response response = Response.status(Status.BAD_REQUEST).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postLogin(userName, password);
    assertEquals(response.getStatus(), Status.BAD_REQUEST.getStatusCode());

    context.assertIsSatisfied();
}

@Test(expected=RuntimeException.class)
public void postLoginBadRequestTest() {
    String userName = null;
    String password = null;
    studentClient = new StudentClient(target);

    final Response response = Response.status(Status.PRECONDITION_FAILED).build();
    context.checking(new Expectations() {
        {
            oneOf(target).path(with(any(String.class)));
            will(returnValue(target));
            oneOf(target).request();
            will(returnValue(builder));
            oneOf(builder).post(with(any(Entity.class)));
            will(returnValue(response));
        }
    });
    studentClient.postLogin(userName, password);
    assertEquals(response.getStatus(), Status.PRECONDITION_FAILED.getStatusCode());

    context.assertIsSatisfied();
}
</code></pre>

<p>}
```</p>

<h2>7. Create Unit Test cases for StudentResource class</h2>

<p>In similar lines, create unit test cases for StudentResource class by mocking the external dependencies which the class depends on for its operation.</p>

<p>```
public class StudentResourceUnitTest {</p>

<pre><code>private Mockery context;
private StudentService studentService;
private StudentResourceInterface studentResourceInterface;

@Before
public void beforeEachTest() throws Exception {
    context = new Mockery();
    studentService = context.mock(StudentService.class);
    studentResourceInterface = new StudentResource();

    Field field = studentResourceInterface.getClass().getDeclaredField(
            "studentService");
    field.setAccessible(true);
    field.set(studentResourceInterface, studentService);
}

@Test
public void postSignupResourceTest() throws ParseException {
    final String userName = "jersey";
    String password = "jersey";
    String firstName = "jersey";
    String lastName = "jersey";
    String dateOfBirth = "12/21/2013";
    String emailAddress = "jersey@gmail.com";
    final StudentInterface student = context.mock(StudentInterface.class);

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByUserName(userName);
            will(returnValue(false));
            oneOf(studentService).save(with(any(StudentInterface.class)));
            will(returnValue(student));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);

    context.assertIsSatisfied();
}

@Test
public void postSignupResourceForExistingUserTest() throws ParseException {
    final String userName = "jersey";
    String password = "jersey";
    String firstName = "jersey";
    String lastName = "jersey";
    String dateOfBirth = "12/21/2013";
    String emailAddress = "jersey@gmail.com";

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByUserName(userName);
            will(returnValue(true));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);

    context.assertIsSatisfied();
}

@Test
public void postSignupResourceForBadRequestTest() throws ParseException {
    String userName = null;
    String password = null;
    String firstName = null;
    String lastName = null;
    String dateOfBirth = null;
    String emailAddress = null;
    final StudentResourceInterface studentResourceInterface = context
            .mock(StudentResourceInterface.class);
    final Response response = Response.status(Status.PRECONDITION_FAILED)
            .build();
    final Response response1 = Response.ok().entity(new Viewable("/login"))
            .build();

    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    userName = "jersey";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNonNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    password = "jersey";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    firstName = "jersey";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)),
                    with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);

    lastName = "jersey";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNull(String.class)), with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    dateOfBirth = "12/20/2013";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface)
                    .signup(with(aNonNull(String.class)),
                            with(aNonNull(String.class)),
                            with(aNonNull(String.class)),
                            with(aNonNull(String.class)),
                            with(aNonNull(String.class)),
                            with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    emailAddress = "jersey@gmail.com";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).signup(
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)));
            will(returnValue(response1));
        }
    });
    studentResourceInterface.signup(userName, password, firstName,
            lastName, dateOfBirth, emailAddress);
    assertEquals(response1.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}

@Test
public void postLoginResourceTest() throws ParseException {
    final String userName = "jersey";
    final String password = "jersey";

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(userName, password);
            will(returnValue(true));
        }
    });
    studentResourceInterface.login(userName, password);

    final String password1 = "jersey123";
    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(userName, password1);
            will(returnValue(false));
        }
    });
    studentResourceInterface.login(userName, password1);

    context.assertIsSatisfied();
}

@Test
public void postLoginResourceForBadRequestTest() throws ParseException {
    final String userName = null;
    final String password = null;
    final StudentResourceInterface studentResourceInterface = context
            .mock(StudentResourceInterface.class);
    final Response response = Response.status(Status.PRECONDITION_FAILED)
            .build();
    final Response response1 = Response.ok().entity(new Viewable("/login"))
            .build();

    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).login(
                    with(aNull(String.class)), with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.login(userName, password);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    final String userName1 = "jersey";

    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface)
                    .login(with(aNonNull(String.class)),
                            with(aNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.login(userName1, password);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    final String password1 = "jersey";
    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface)
                    .login(with(aNull(String.class)),
                            with(aNonNull(String.class)));
            will(returnValue(response));
        }
    });
    studentResourceInterface.login(userName, password1);
    assertEquals(response.getStatus(),
            Status.PRECONDITION_FAILED.getStatusCode());

    context.checking(new Expectations() {
        {
            oneOf(studentResourceInterface).login(
                    with(aNonNull(String.class)),
                    with(aNonNull(String.class)));
            will(returnValue(response1));
        }
    });
    studentResourceInterface.login(userName1, password1);
    assertEquals(response1.getStatus(), Status.OK.getStatusCode());

    context.assertIsSatisfied();
}
</code></pre>

<p>}
```</p>

<h2>8. Create Unit Test cases for StudentService class</h2>

<p>Create unit test cases for StudentService class by mocking the external dependencies which the class depends on for its operation.</p>

<p>```
public class StudentServiceUnitTest {</p>

<pre><code>private Mockery context;
private StudentRepository studentRepository;
private StudentService studentService;

@Before
public void beforeEachTest() throws Exception {
    context = new Mockery();
    studentRepository = context.mock(StudentRepository.class);
    studentService = new StudentServiceImpl();

    Field field = studentService.getClass().getDeclaredField(
            "studentRepository");
    field.setAccessible(true);
    field.set(studentService, studentRepository);
}

@Test
public void findByLoginTest() {
    final String userName = "j2eee";
    final String password = "j2ee";
    final StudentInterface studentInterface = null;

    context.checking(new Expectations() {
        {
            oneOf(studentRepository).findByUserName(userName);
            will(returnValue(studentInterface));
        }
    });
    studentService.findByLogin(userName, password);
    assertNull(studentInterface);

    final String userName1 = "j2ee";
    final StudentInterface studentInterface1 = context
            .mock(StudentInterface.class);

    context.checking(new Expectations() {
        {
            oneOf(studentRepository).findByUserName(userName1);
            will(returnValue(studentInterface1));
            oneOf(studentInterface1).getPassword();
            will(returnValue(password));
        }
    });
    studentService.findByLogin(userName1, password);
    assertNotNull(studentInterface1);
    assertEquals("j2ee", password);

    final String password1 = "j2eee";

    context.checking(new Expectations() {
        {
            oneOf(studentRepository).findByUserName(userName1);
            will(returnValue(studentInterface1));
            oneOf(studentInterface1).getPassword();
            will(returnValue(password1));
        }
    });
    studentService.findByLogin(userName1, password1);
    assertNotNull(studentInterface1);
    assertNotEquals("j2ee", password1);

    context.assertIsSatisfied();
}

@Test
public void findByLoginWithNullParametersTest() {
    final String userName = null;
    final String password = null;
    studentService = context.mock(StudentService.class);

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(with(aNull(String.class)),
                    with(aNull(String.class)));
            will(returnValue(false));
        }
    });
    studentService.findByLogin(userName, password);

    final String userName1 = "j2ee";

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(with(aNonNull(String.class)),
                    with(aNull(String.class)));
            will(returnValue(false));
        }
    });
    studentService.findByLogin(userName1, password);

    final String password1 = "j2eee";

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(with(aNull(String.class)),
                    with(aNonNull(String.class)));
            will(returnValue(false));
        }
    });
    studentService.findByLogin(userName, password1);

    context.checking(new Expectations() {
        {
            oneOf(studentService).findByLogin(with(aNonNull(String.class)),
                    with(aNonNull(String.class)));
            will(returnValue(false));
        }
    });
    studentService.findByLogin(userName1, password1);

    context.assertIsSatisfied();
}

@Test
public void findByEmptyLoginTest() {
    final String userName = "";
    final String password = "";
    final StudentInterface studentInterface = null;

    context.checking(new Expectations() {
        {
            oneOf(studentRepository).findByUserName(userName);
            will(returnValue(studentInterface));
        }
    });
    studentService.findByLogin(userName, password);
    assertNull(studentInterface);

    context.assertIsSatisfied();
}

@Test
public void findByUserNameTest() {
    final String userName = "j2ee";

    context.checking(new Expectations() {
        {
            oneOf(studentRepository)
                    .findByUserName(with(any(String.class)));
            will(returnValue(with(any(StudentInterface.class))));
        }
    });
    studentService.findByUserName(userName);

    context.assertIsSatisfied();
}

@Test
public void findByBadUserNameTest() {
    final String userName = "j2eee";
    final StudentInterface studentInterface = null;

    context.checking(new Expectations() {
        {
            oneOf(studentRepository)
                    .findByUserName(with(any(String.class)));
            will(returnValue(studentInterface));
        }
    });
    studentService.findByUserName(userName);
    assertNull(studentInterface);

    final String userName1 = "j2ee";
    final StudentInterface studentInterface1 = context
            .mock(StudentInterface.class);

    context.checking(new Expectations() {
        {
            oneOf(studentRepository).findByUserName(userName1);
            will(returnValue(studentInterface1));
        }
    });
    studentService.findByUserName(userName1);
    assertNotNull(studentInterface1);

    context.assertIsSatisfied();
}
</code></pre>

<p>}
```</p>

<h2>9. Running Test cases</h2>

<p>Any of the test case or test class can be run by right clicking on the name of the test case or test class and choosing &ldquo;Run As->JUnit test case&rdquo;. Each of the test case developed should be tested to give a success output (indicated by the green bar in the JUnit output)</p>

<h2>10. Code Coverage</h2>

<p>Using tools like EclEmma, code coverage for the project can be measured. To install EclEmma, choose &ldquo;Help->Eclipse Marketplace&rdquo; and search for EclEmma in the search toolbar. Install the tool using the steps on-screen.</p>

<p>Once the tool is installed, the code coverage for the project can be measured by choosing &ldquo;Coverage As->JUnit test case&rdquo; from the right click options on the project.</p>

<p>Achieving a code coverage of about or above 80% is normally preferred according to industrial standards. Not only writing unit test cases for existing code, but developing test scenarios for which code is not in place is an important step in Test Driven Development (TDD). By iteratively following the TDD approach, the stability of the code could be significantly improved.</p>

<h2>11. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST.git">https://github.com/elizabetht/StudentEnrollmentWithREST.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.2">https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using Jersey2 REST With Spring]]></title>
    <link href="http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring/"/>
    <updated>2013-12-13T10:45:30-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/12/13/student-enrollment-using-jersey-rest-with-spring</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Hibernate ORM in a REST based Jersey2 Spring environment. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<!-- more -->


<h2>1. Create Java Web Application Project using Maven Template</h2>

<p>To begin with, from the command line, create a Java Maven project with the template of jersey-quickstart-webapp by providing appropriate values for GroupId, Artifact Id, Version and Package for the project.</p>

<p><code>
mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=2.4.1
</code></p>

<p>Import the project into the IDE using File->Import->Existing Maven Projects, select Root Directory where the Project is created (ideally the name of the Project or ArtifactId) and click on Finish. The sample web application directory structure is shown below with a standard deployment descriptor web.xml and Maven pom.xml</p>

<p><img src="/images/jersey-layout.png" title="Jersey REST Spring Maven Project Layout" alt="Jersey REST Spring Maven Project Layout" /></p>

<h2>2. Update pom.xml</h2>

<p>To make the above Maven Java Web Application project support the Hibernate ORM and Jersey Container in Spring framework, add the following dependencies to the existing pom.xml</p>

<ul>
<li>jstl and servlet-api (for Javax Servlet Support)</li>
<li>jersey-container-servlet, jersey-media-moxy, jersey-spring3, jersey-server and jersey-mvc-jsp (for Jersey Support)</li>
<li>spring-core, spring-context, spring-web and spring-webmvc(for Spring Support)</li>
<li>junit (for JUnit Support)</li>
<li>commons-lang3 (for standard Java library support)</li>
<li>mysql-connector-java (for MYSQL support)</li>
<li>spring-jdbc (for data access with JDBC Spring)</li>
<li>spring-orm (for ORM data access with Spring)</li>
<li>spring-data-jpa (for JPA support)</li>
<li>hibernate-validator and hibernate-entitymanager (for Hibernate Support)</li>
<li>jta (for transaction support)</li>
</ul>


<p>```</p>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
        &lt;version&gt;2.5&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;1.2&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;
        &lt;!-- &lt;artifactId&gt;jersey-container-servlet-core&lt;/artifactId&gt; --&gt;
        &lt;!-- use the above artifactId if you need servlet 2.x compatibility --&gt;
        &lt;artifactId&gt;jersey-container-servlet&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;!-- uncomment this to get JSON support --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-media-moxy&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-spring3&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.glassfish.jersey.ext&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-mvc-jsp&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.21&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
        &lt;version&gt;4.2.0.Final&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
        &lt;version&gt;4.1.9.Final&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.transaction&lt;/groupId&gt;
        &lt;artifactId&gt;jta&lt;/artifactId&gt;
        &lt;version&gt;1.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
        &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;
        &lt;version&gt;1.3.0.RELEASE&lt;/version&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.springframework&lt;/groupId&gt;
                &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;

&lt;/dependencies&gt;
&lt;properties&gt;
    &lt;jersey.version&gt;2.4.1&lt;/jersey.version&gt;
    &lt;spring.version&gt;3.2.4.RELEASE&lt;/spring.version&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
&lt;/properties&gt;
</code></pre>

<p>```</p>

<h2>3. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A Welcome file.</li>
<li>The Context Config Location.</li>
<li>A ContextLoaderLister and RequestContextListener to integrate spring with the web application.</li>
<li>A Spring Jersey Web Servlet. Specify the location of the provider packages, enable the JSON POJO Mapping Feature, provide the path where the JSP files for the project are stored to the JSP TemplateBasePath and enable the JSP MVC Feature. In this sample, a configuration file named applicationConfig.xml is created under src/main/resources folder  and the JSP files are placed under WEB-INF/jsp folder in the project layout.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->


<p>&lt;web-app version=&ldquo;2.5&rdquo; xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo; xsi:schemaLocation=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a> <a href="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd</a>&rdquo;></p>

<pre><code>&lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;

&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;
&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;
&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;servlet&gt;
    &lt;servlet-name&gt;Spring Jersey Web Servlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt;
        &lt;param-value&gt;com.github.elizabetht&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;
        &lt;param-value&gt;true&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;jersey.config.server.mvc.templateBasePath.jsp&lt;/param-name&gt;
        &lt;param-value&gt;/WEB-INF/jsp&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;jersey.config.server.provider.classnames&lt;/param-name&gt;
        &lt;param-value&gt;org.glassfish.jersey.server.mvc.jsp.JspMvcFeature&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;Spring Jersey Web Servlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/webapi/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p>&lt;/web-app>
```</p>

<h2>4. Create persistence.xml</h2>

<p>Create a file named persistence.xml under the folder src/main/resources/META-INF folder in the project to define the persistence unit required by JPA. Add the following to the persistence.xml to define a persistence unit named punit.</p>

<p>```
&lt;persistence xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/persistence">http://java.sun.com/xml/ns/persistence</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="{http://java.sun.com/xml/ns/persistence} {http://java.sun.com/xml/ns/persistence_2_0.xsd}"
version="2.0"&gt;

&lt;persistence-unit name="punit"&gt;
&lt;/persistence-unit&gt;
</code></pre>

<p></persistence>
```</p>

<h2>5. Create the Spring Configuration File</h2>

<p>As defined in the web.xml, create a file named applicationContext.xml under the folder src/main/resources folder in the project to define JPA and Hibernate related configurations. Note that any file created under src/main/resources folder in a maven project will be automagically added by Maven to the classpath. If STS(Spring Tool Suite) is the IDE, go ahead and enable the context, jpa, mvc and tx namespaces. The applicationContext.xml will be as shown below</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;beans xmlns=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:jpa="http://www.springframework.org/schema/data/jpa"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:mvc="http://www.springframework.org/schema/mvc"
xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"&gt;
</code></pre>

<p>```</p>

<p>After enabling the required namespaces, include the following (in between the &lt;beans&gt; and &lt;/beans&gt; tags) to indicate that the application is annotation driven, base package for context component scan and base package for the jpa repositories scan.</p>

<p>```</p>

<pre><code>&lt;mvc:annotation-driven /&gt;

&lt;context:annotation-config /&gt;
&lt;context:component-scan base-package="com.github.elizabetht" /&gt;

&lt;jpa:repositories base-package="com.github.elizabetht.repository" /&gt;
</code></pre>

<p>```</p>

<p>Next, include the bean PersistenceAnnotationBeanPostProcessor. This is necessary to process the Persistence Unit, Persistence Context annotations and for injecting JPA related resources.</p>

<p><code>
&lt;bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /&gt;
</code></p>

<p>Include the bean for EntityManagerFactory which lists the various JPA related properties/resources.</p>

<p>```
<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"></p>

<pre><code>    &lt;property name="persistenceUnitName" value="punit" /&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="jpaVendorAdapter"&gt;
        &lt;bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"&gt;
            &lt;property name="showSql" value="true" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
    &lt;property name="jpaPropertyMap"&gt;
        &lt;map&gt;
            &lt;entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" /&gt;
            &lt;entry key="hibernate.hbm2ddl.auto" value="validate" /&gt;
            &lt;entry key="hibernate.format_sql" value="true" /&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>```</p>

<p>Include the bean for data source, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<p>```
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"></p>

<pre><code>    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
    &lt;property name="url" value="jdbc:mysql//&lt;include connection url&gt;:3306/studentEnrollment?autoReconnect=true&amp;amp;createDatabaseIfNotExist=true&amp;amp;" /&gt;
    &lt;property name="username" value="&lt;include username&gt;" /&gt;
    &lt;property name="password" value="&lt;include password&gt;" /&gt;
</code></pre>

<p></bean>
```</p>

<p>Include the bean for transaction manager for scoping/controlling the transactions.</p>

<p>```
<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"></p>

<pre><code>    &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;
</code></pre>

<p></bean></p>

<p>&lt;tx:annotation-driven transaction-manager=&ldquo;transactionManager&rdquo; />
```</p>

<p>Thus ends the long configuration in applicationContext.xml</p>

<h2>6. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;jsp&rdquo; under WEB-INF (This is where the jsp files will be created as indicated in the web.xml for the JSP TemplateBasePath).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="/images/signup.png" title="Jersey REST Spring Hibernate Signup Layout" alt="Jersey REST Spring Hibernate Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="/images/login.png" title="Jersey REST Spring Hibernate Login Layout" alt="Jersey REST Spring Hibernate Login Layout" /></p>

<p>Also create success.jsp to indicate the login success and failure.jsp to indicate login failure (These are just pages used to display the contents &ndash; no processing logic involved).</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under webapp folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/webapp">https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/webapp</a></p>

<h2>7. Create packages for Resource, Service, Repository and Model tier classes</h2>

<p>Create packages each for the Jersey Resource, Service, Repository and Model classes under the src/main/java folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/jersey-package.png" title="Jersey REST Spring Package Layout" alt="Jersey REST Spring Package Layout" /></p>

<h2>8. Create classes for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity during signup. Create another POJO class named StudentLogin.java inside the same package com.github.elizabetht.model to include the Student Login details.</p>

<p>Annotate the classes with @Component to be picked by the Context-Component Scan of the Jersey-Spring framework. Also annotate the classes with @XmlRootElement to indicate the XML Element.</p>

<p>A reference link to the files for the Model classes can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/java/com/github/elizabetht/model">https://github.com/elizabetht/StudentEnrollmentWithREST/tree/master/src/main/java/com/github/elizabetht/model</a></p>

<h2>9. Create class for Repository Tier</h2>

<p>Create an interface class named StudentRepository.java inside the package com.github.elizabetht.repository to support the repository tier database operations.</p>

<p>There are two interface methods needed for the application&rsquo;s purpose.</p>

<ul>
<li>To Insert the Student Signup details into the Database</li>
<li>To Verify the Student Login details from the Database</li>
</ul>


<p>```
@Repository(&ldquo;studentRepository&rdquo;)
public interface StudentRepository extends JpaRepository&lt;Student, Long> {</p>

<pre><code>@Query("select s from Student s where s.userName = :userName")
Student findByUserName(@Param("userName") String userName);
</code></pre>

<p>}
```</p>

<p>The save() method is supported by the Hibernate implementation and hence no separate SQL statements are required for the data insert.</p>

<h2>10. Create classes for Service Tier</h2>

<p>Create an interface class named StudentService.java inside the package com.github.elizabetht.service to support the service tier operations.</p>

<p>```
public interface StudentService {</p>

<pre><code>Student save(Student student);
boolean findByLogin(String userName, String password);
boolean findByUserName(String userName);
</code></pre>

<p>}
```</p>

<p>Create a service tier implementation class (a POJO indeed) named StudentServiceImpl.java inside the package com.github.elizabetht.service. This is where the application logic goes &ndash; either to save the student details into the database or to verify the student (already saved) details from the database.</p>

<p>```
@Service(&ldquo;studentService&rdquo;)
public class StudentServiceImpl implements StudentService {</p>

<pre><code>@Autowired
private StudentRepository studentRepository;

@Transactional
public Student save(Student student) {
    return studentRepository.save(student);
}

public boolean findByLogin(String userName, String password) {  
    Student stud = studentRepository.findByUserName(userName);

    if(stud != null &amp;&amp; stud.getPassword().equals(password)) {
        return true;
    } 

    return false;       
}

public boolean findByUserName(String userName) {
    Student stud = studentRepository.findByUserName(userName);

    if(stud != null) {
        return true;
    }

    return false;
}
</code></pre>

<p>}
```</p>

<h2>11. Create class for Resource Tier</h2>

<p>Create a Resource tier POJO class named StudentResource.java inside the package com.github.elizabetht.resource. This is where a REST API is implemented for each of the operation performed from the front end.</p>

<p>```
@Component
@Path(&ldquo;studentResource&rdquo;)
@XmlRootElement
public class StudentResource {</p>

<pre><code>@Autowired
private StudentService studentService;

@GET
@Path("signup")
@Produces(MediaType.TEXT_HTML)
public Response signup() {
    return Response.ok(new Viewable("/signup")).build();
}

@POST
@Path("signup")
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
@Produces(MediaType.TEXT_HTML)
public Response signup(@FormParam("userName") String userName,
        @FormParam("password") String password,
        @FormParam("firstName") String firstName,
        @FormParam("lastName") String lastName,
        @FormParam("dateOfBirth") String dateOfBirth,
        @FormParam("emailAddress") String emailAddress)
        throws ParseException {

    if (userName == null || password == null || firstName == null
            || lastName == null || dateOfBirth == null
            || emailAddress == null) {
        return Response.status(Status.PRECONDITION_FAILED).build();
    }

    Student student = new Student();
    student.setUserName(userName);
    student.setPassword(password);
    student.setFirstName(firstName);
    student.setLastName(lastName);

    student.setDateOfBirth(new java.sql.Date(new SimpleDateFormat(
            "MM/dd/yyyy").parse(dateOfBirth.substring(0, 10)).getTime()));

    student.setEmailAddress(emailAddress);

    if (studentService.findByUserName(userName)) {
        Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
        map.put("message", "User Name exists. Try another user name");
        map.put("student", student);
        return Response.status(Status.BAD_REQUEST)
                .entity(new Viewable("/signup", map)).build();
    } else {
        studentService.save(student);
        return Response.ok().entity(new Viewable("/login")).build();
    }
}

@GET
@Path("login")
@Produces(MediaType.TEXT_HTML)
public Response login() {
    return Response.ok(new Viewable("/login")).build();
}

@POST
@Path("login")
@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
@Produces(MediaType.TEXT_HTML)
public Response login(@FormParam("userName") String userName,
        @FormParam("password") String password) {

    if (userName == null || password == null) {
        return Response.status(Status.PRECONDITION_FAILED).build();
    }

    boolean found = studentService.findByLogin(userName, password);
    if (found) {
        return Response.ok().entity(new Viewable("/success")).build();
    } else {
        return Response.status(Status.BAD_REQUEST)
                .entity(new Viewable("/failure")).build();
    }
}
</code></pre>

<p>}
```</p>

<h2>12. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the dataSource bean in applicationContext.xml</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<p><code>
CREATE TABLE `student` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `dateOfBirth` datetime NOT NULL,
  `emailAddress` varchar(255) NOT NULL,
  `firstName` varchar(255) NOT NULL,
  `lastName` varchar(255) NOT NULL,
  `password` varchar(8) NOT NULL,
  `userName` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
</code></p>

<h2>13. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithREST/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithREST/</a></p>

<h2>14. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST.git">https://github.com/elizabetht/StudentEnrollmentWithREST.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.1">https://github.com/elizabetht/StudentEnrollmentWithREST/releases/tag/1.1</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using JDBC]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-jdbc/"/>
    <updated>2013-11-21T09:41:55-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-jdbc</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with JDBC. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<!-- more -->


<h2>1. Create Java Web Application Project</h2>

<p>To begin with, in the IDE, create a Java Dynamic Web project for the application. While creating the dynamic web project, enable the checkbox to generate web.xml deployment descriptor.</p>

<p>The sample web application directory structure is shown below with a standard deployment descriptor web.xml</p>

<p><img src="/images/jdbclayout.png" title="JDBC Dynamic Web Project Layout" alt="JDBC Dynamic Web Project Layout" /></p>

<h2>2. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A servlet and the corresponding class in the source folder that would handle the HTTP requests.</li>
<li>A servlet-mapping to map the servlet created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
<li>A welcome file list, which can be used optionally to include the welcome file for the application.</li>
</ul>


<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;web-app xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo; xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a>&rdquo; xmlns:web=&ldquo;<a href="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd</a>&rdquo; xsi:schemaLocation=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a> <a href="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd</a>&rdquo; id=&ldquo;WebApp_ID&rdquo; version=&ldquo;3.0&rdquo;>
  &lt;display-name>StudentEnrollmentWithJDBC&lt;/display-name></p>

<p>  &lt;welcome-file-list></p>

<pre><code>&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
</code></pre>

<p>  &lt;/welcome-file-list></p>

<p>  <servlet></p>

<pre><code>&lt;servlet-name&gt;studentJDBCServlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;com.github.elizabetht.controller.StudentController&lt;/servlet-class&gt;
</code></pre>

<p>  </servlet></p>

<p>  &lt;servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;studentJDBCServlet&lt;/servlet-name&gt;
&lt;url-pattern&gt;/StudentController&lt;/url-pattern&gt;
</code></pre>

<p>  &lt;/servlet-mapping>
&lt;/web-app>
```</p>

<h2>3. Add JARs to the project</h2>

<p>Add the following JARs from the web (or their latest equivalent) to the WEB-INF/lib folder under WebContent directory in the project.</p>

<ul>
<li>mysql-connector-java-5.1.26-bin.jar (for MYSQL data access support)</li>
<li>jstl.jar and standard.jar (for JSTL Expression language support)</li>
<li>ojdbc5.jar (for Oracle JDBC Driver support)</li>
</ul>


<p>The sample lib folder structure is shown below with the necessary JARs added for the project.</p>

<p><img src="/images/jdbcliblayout.png" title="JDBC Library Layout" alt="JDBC Library Layout" /></p>

<h2>4. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;content&rdquo; under WebContent (This is where the jsp files will be created).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="/images/signup.png" title="JDBC Signup Layout" alt="JDBC Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="/images/login.png" title="JDBC Login Layout" alt="JDBC Login Layout" /></p>

<p>The main actions for this application are as follows:</p>

<ul>
<li>Signup (To Insert the Student Signup details into the Database)</li>
<li>Login (To Verify the Student Login details from the Database)</li>
</ul>


<p>In order to display a success (result) page after the login action is complete, create a success.jsp page to indicate the login success. Similarly, to indicate a login failure (result), create a page failure.jsp. These are just pages used to display the contents &ndash; no processing logic involved.</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets. It also uses a datepicker stylesheet as well to pop up a calendar for the DateOfBirth field in the Student Signup page (<a href="http://www.eyecon.ro/bootstrap-datepicker/">http://www.eyecon.ro/bootstrap-datepicker/</a>).</p>

<p>A reference link to the files under WebContent folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC/tree/master/WebContent">https://github.com/elizabetht/StudentEnrollmentWithJDBC/tree/master/WebContent</a></p>

<h2>5. Create packages</h2>

<p>Create packages each for the Controller, Repository and Model tiers under the src folder.
Also create package for the utilities class under the src folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/jdbc-package.png" title="JDBC Package Layout" alt="JDBC Package Layout" /></p>

<h2>6. Create class for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity.</p>

<p>```
public class Student {</p>

<pre><code>private String userName;
private String firstName;
private String lastName;
private String password;
private String emailAddress;
private Date dateOfBirth;

public String getUserName() {
    return userName;
}

public void setUserName(String userName) {
    this.userName = userName;
}

public String getFirstName() {
    return firstName;
}

public void setFirstName(String firstName) {
    this.firstName = firstName;
}

public String getLastName() {
    return lastName;
}

public void setLastName(String lastName) {
    this.lastName = lastName;
}

public String getPassword() {
    return password;
}

public void setPassword(String password) {
    this.password = password;
}

public String getEmailAddress() {
    return emailAddress;
}

public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
}

public Date getDateOfBirth() {
    return dateOfBirth;
}

public void setDateOfBirth(Date dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
}
</code></pre>

<p>}
```</p>

<h2>7. Create db.properties file</h2>

<p>Create a file named db.properties under the src folder, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<p><code>
dbDriver=com.mysql.jdbc.Driver
connectionUrl=jdbc:mysql://&lt;include connection url&gt;:3306/studentEnrollment
userName=&lt;include username&gt;
password=&lt;include password&gt;
</code></p>

<h2>8. Create utility class </h2>

<p>Create a POJO class named DbUtil.java under the package com.github.elizabetht.util to include a helper class functionality that would load the db.properties file and get the database connection.</p>

<p>```
public class DbUtil {</p>

<pre><code>private static Connection dbConnection = null;

public static Connection getConnection() {
    if (dbConnection != null) {
        return dbConnection;
    } else {
        try {
            InputStream inputStream = DbUtil.class.getClassLoader()
                    .getResourceAsStream("db.properties");
            Properties properties = new Properties();
            if (properties != null) {
                properties.load(inputStream);

                String dbDriver = properties.getProperty("dbDriver");
                String connectionUrl = properties
                        .getProperty("connectionUrl");
                String userName = properties.getProperty("userName");
                String password = properties.getProperty("password");

                Class.forName(dbDriver).newInstance();
                dbConnection = DriverManager.getConnection(connectionUrl,
                        userName, password);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dbConnection;
    }
}
</code></pre>

<p>}
```</p>

<h2>9. Create class for Repository tier</h2>

<p>Create a Repository tier POJO class named StudentRepository.java under the package com.github.elizabetht.repository to support the database operations of saving the student details, verifying the student login details and checking if the username exists when a save is attempted.</p>

<p>```
public class StudentRepository {</p>

<pre><code>private Connection dbConnection;

public StudentRepository() {
    dbConnection = DbUtil.getConnection();
}

public void save(String userName, String password, String firstName, String lastName, String dateOfBirth, String emailAddress) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("insert into student(userName, password, firstName, lastName, dateOfBirth, emailAddress) values (?, ?, ?, ?, ?, ?)");
        prepStatement.setString(1, userName);
        prepStatement.setString(2, password);
        prepStatement.setString(3, firstName);
        prepStatement.setString(4, lastName);
        prepStatement.setDate(5, new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy")
        .parse(dateOfBirth.substring(0, 10)).getTime()));
        prepStatement.setString(6, emailAddress);

        prepStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    } catch (ParseException e) {            
        e.printStackTrace();
    }
}

public boolean findByUserName(String userName) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("select count(*) from student where userName = ?");
        prepStatement.setString(1, userName);   

        ResultSet result = prepStatement.executeQuery();
        if (result != null) {   
            while (result.next()) {
                if (result.getInt(1) == 1) {
                    return true;
                }               
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}

public boolean findByLogin(String userName, String password) {
    try {
        PreparedStatement prepStatement = dbConnection.prepareStatement("select password from student where userName = ?");
        prepStatement.setString(1, userName);           

        ResultSet result = prepStatement.executeQuery();
        if (result != null) {
            while (result.next()) {
                if (result.getString(1).equals(password)) {
                    return true;
                }
            }               
        }           
    } catch (Exception e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>}
```</p>

<h2>10. Create class for Controller Tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the servicing logic of the application goes &ndash; whether a signup or login action is called.</p>

<p>```
@SuppressWarnings(&ldquo;serial&rdquo;)
public class StudentController extends HttpServlet {</p>

<pre><code>private StudentRepository studentRepository;

private static String STUDENT_SIGNUP = "content/signup.jsp";
private static String STUDENT_LOGIN = "content/login.jsp";
private static String LOGIN_SUCCESS = "content/success.jsp";
private static String LOGIN_FAILURE = "content/failure.jsp";

/**
 * @see HttpServlet#HttpServlet()
 */
public StudentController() {
    super();
    studentRepository = new StudentRepository();
}

/**
 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
 *      response)
 */
protected void doGet(HttpServletRequest request,
        HttpServletResponse response) throws ServletException, IOException {    
    String forward = STUDENT_SIGNUP;
    RequestDispatcher view = request.getRequestDispatcher(forward);
    view.forward(request, response);
}

/**
 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
 *      response)
 */
protected void doPost(HttpServletRequest request,
        HttpServletResponse response) throws ServletException, IOException {
    String pageName = request.getParameter("pageName");
    String forward = "";        

    if (studentRepository != null) {
        if (pageName.equals("signup")) {
            if (studentRepository.findByUserName(request
                    .getParameter("userName"))) {
                request.setAttribute("message", "User Name exists. Try another user name");
                forward = STUDENT_SIGNUP;
                RequestDispatcher view = request
                        .getRequestDispatcher(forward);
                view.forward(request, response);
                return;
            }

            studentRepository.save(request.getParameter("userName"),
                    request.getParameter("password"),
                    request.getParameter("firstName"),
                    request.getParameter("lastName"),
                    request.getParameter("dateOfBirth"),
                    request.getParameter("emailAddress"));
            forward = STUDENT_LOGIN;
        } else if (pageName.equals("login")) {
            boolean result = studentRepository.findByLogin(
                    request.getParameter("userName"),
                    request.getParameter("password"));
            if (result == true) {
                forward = LOGIN_SUCCESS;
            } else {
                forward = LOGIN_FAILURE;
            }
        }
    }
    RequestDispatcher view = request.getRequestDispatcher(forward);
    view.forward(request, response);
}
</code></pre>

<p>}
```</p>

<h2>11. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the db.properties file.</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<p><code>
CREATE TABLE `student` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `dateOfBirth` datetime NOT NULL,
  `emailAddress` varchar(255) NOT NULL,
  `firstName` varchar(255) NOT NULL,
  `lastName` varchar(255) NOT NULL,
  `password` varchar(8) NOT NULL,
  `userName` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
</code></p>

<h2>12. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithJDBC/">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithJDBC/</a></p>

<h2>13. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC.git">https://github.com/elizabetht/StudentEnrollmentWithJDBC.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithJDBC/releases/tag/1.2">https://github.com/elizabetht/StudentEnrollmentWithJDBC/releases/tag/1.2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Java Web Application Using Struts 2]]></title>
    <link href="http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2/"/>
    <updated>2013-11-21T09:41:45-06:00</updated>
    <id>http://elizabetht.github.io/blog/2013/11/21/student-enrollment-using-struts-2</id>
    <content type="html"><![CDATA[<p>This post will show how to create a Student Enrollment Application using MYSQL DB with Struts 2 framework. This is a simple application that aims to collect the input details from the user during signup, save the details in the MYSQL DB and authenticate the same during login.</p>

<!-- more -->


<h2>1. Create Java Web Application Project</h2>

<p>To begin with, in the IDE, create a Java Dynamic Web project for the application. While creating the dynamic web project, enable the checkbox to generate web.xml deployment descriptor.</p>

<p>The sample web application directory structure is shown below with a standard deployment descriptor web.xml</p>

<p><img src="/images/strutslayout.png" title="Struts Dynamic Web Project Layout" alt="Struts Dynamic Web Project Layout" /></p>

<h2>2. Modify web.xml</h2>

<p>Modify the contents of the web.xml to include the following:</p>

<ul>
<li>A Struts Dispatcher named Struts Prepare and Execute Filter to handle both the preparation and execution phases of Struts dispatching process.</li>
<li>A Filter mapping to map the dispatcher created in the above step that should be invoked when the client specifies the url matching the url pattern.</li>
</ul>


<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;web-app xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo; xmlns=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a>&rdquo; xmlns:web=&ldquo;<a href="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd</a>&rdquo; xsi:schemaLocation=&ldquo;<a href="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</a> <a href="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd</a>&rdquo; id=&ldquo;WebApp_ID&rdquo; version=&ldquo;3.0&rdquo;>
  &lt;display-name>StudentEnrollmentWithStruts&lt;/display-name>
  <filter></p>

<pre><code>      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;
</code></pre>

<p>  </filter>
  &lt;filter-mapping></p>

<pre><code>      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p>  &lt;/filter-mapping><br/>
&lt;/web-app>
```</p>

<h2>3. Add JARs to the project</h2>

<p>Add the following JARs from the web (or their latest equivalent) to the WEB-INF/lib folder under WebContent directory in the project.</p>

<ul>
<li>asm-3.3.jar (for bytecode manipulation framework support)</li>
<li>asm-commons-3.3.jar (for bytecode manipulation framework support)</li>
<li>commons-fileupload-1.3.jar (for file upload capability to your servlets and web applications support)</li>
<li>commons-io-2.0.1.jar (for library of utilities to assist with developing IO functionality)</li>
<li>commons-lang-2.4.jar (for manipulation of core classes by providing helper utilities)</li>
<li>commons-lang3-3.1.jar (for manipulation of core classes by providing helper utilities)</li>
<li>freemarker-2.3.19.jar (for UI tag templates support)</li>
<li>javassist-3.11.0.GA.jar (for JAVA programming ASSISTance support)</li>
<li>mysql-connector-java-5.1.26-bin.jar (for MYSQL data access support)</li>
<li>ognl-3.0.6.jar (for Object Graph Navigation Language (OGNL) support)</li>
<li>struts2-bootstrap-plugin-1.6.1.jar (for Bootstrap support)</li>
<li>struts2-convention-plugin-2.3.15.1.jar (for the zero configuration and naming convention support)</li>
<li>struts2-core-2.3.15.1.jar (for Struts Framework library support)</li>
<li>struts2-jquery-plugin-3.6.1.jar (for JQuery support)</li>
<li>xwork-core-2.3.15.1.jar (for XWork 2 library support)</li>
</ul>


<p>The sample lib folder structure is shown below with the necessary JARs added for the project.</p>

<p><img src="/images/strutsliblayout.png" title="Struts Library Layout" alt="Struts Library Layout" /></p>

<h2>4. Create JSP Files for Student Signup/Login</h2>

<p>Create a folder named &ldquo;content&rdquo; under WEB-INF (This is where the jsp files will be created).</p>

<p>Create a file signup.jsp to include a form to get the input details like UserName, Password, FirstName, LastName, DateOfBirth and EmailAddress of the student. A snapshot of the signup page is as follows:</p>

<p><img src="/images/struts-signup.png" title="Struts Signup Layout" alt="Struts Signup Layout" /></p>

<p>Next, create a file login.jsp to include a form with UserName and Password. A snapshot of the login page is as follows:</p>

<p><img src="/images/login.png" title="Struts Login Layout" alt="Struts Login Layout" /></p>

<p>The main actions for this application are as follows:</p>

<ul>
<li>Signup (To Insert the Student Signup details into the Database)</li>
<li>Login (To Verify the Student Login details from the Database)</li>
</ul>


<p>In order to display a success (result) page after the login action is complete, create a login-success.jsp page to indicate the login success (The page name will follow the semantics: &lt;action name&gt;&ndash;&lt;result name&gt;.jsp). Similarly, to indicate a login failure (result), create a page login-failure.jsp (login is the action and failure is the result). Also create a signup-failure.jsp page to indicate the signup failure, possibly due to an already existing username (signup is the action and failure is the result). These are just pages used to display the contents &ndash; no processing logic involved.</p>

<p>This application uses twitter bootstrap <a href="http://getbootstrap.com/">http://getbootstrap.com/</a> and <a href="http://bootswatch.com/united/">http://bootswatch.com/united/</a> as style sheets.</p>

<p>The Struts 2 UI component tags are used to create the page elements like the form, textfield, password and hidden fields. The Struts Bootstrap tags are used for the Twitter Bootstrap integration. The Struts jQuery tags are used to include the AJAX functionality of submitting the form outside from the modal window and to use the UI widgets like the datepicker.</p>

<p>A reference link to the files under WebContent folder of this application can be found at <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent">https://github.com/elizabetht/StudentEnrollmentWithStruts/tree/master/WebContent</a></p>

<h2>5. Create packages</h2>

<p>Create packages each for the Struts Actions(equivalent to Controller), Service, Repository and Model classes under the src folder.
Also create package for the utilities class under the src folder.</p>

<p>A sample snapshot of the project after the package creation is as shown below:</p>

<p><img src="/images/struts-package.png" title="Struts Package Layout" alt="Struts Package Layout" /></p>

<h2>6. Create class for Model Tier</h2>

<p>Create a POJO class named Student.java inside the package com.github.elizabetht.model to include the details of the Student model entity.</p>

<p>```
public class Student {</p>

<pre><code>private String userName;
private String firstName;
private String lastName;
private String password;
private String emailAddress;
private Date dateOfBirth;

public String getUserName() {
    return userName;
}

public void setUserName(String userName) {
    this.userName = userName;
}

public String getFirstName() {
    return firstName;
}

public void setFirstName(String firstName) {
    this.firstName = firstName;
}

public String getLastName() {
    return lastName;
}

public void setLastName(String lastName) {
    this.lastName = lastName;
}

public String getPassword() {
    return password;
}

public void setPassword(String password) {
    this.password = password;
}

public String getEmailAddress() {
    return emailAddress;
}

public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
}

public Date getDateOfBirth() {
    return dateOfBirth;
}

public void setDateOfBirth(Date dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
}
</code></pre>

<p>}
```</p>

<h2>7. Create db.properties file</h2>

<p>Create a file named db.properties under the src folder, where the properties of the MYSQL DB like url, username and password can be specified. Replace &lt;include connection url&gt; with the actual connection url for connecting to the MYSQL DB. Likewise, replace &lt;include username&gt; and &lt;include password&gt; with the actual username and password values.</p>

<p><code>
dbDriver=com.mysql.jdbc.Driver
connectionUrl=jdbc:mysql://&lt;include connection url&gt;:3306/studentEnrollment
userName=&lt;include username&gt;
password=&lt;include password&gt;
</code></p>

<h2>8. Create utility class </h2>

<p>Create a POJO class named DbUtil.java under the package com.github.elizabetht.util to include a helper class functionality that would load the db.properties file and get the database connection.</p>

<p>```
public class DbUtil {</p>

<pre><code>private static Connection dbConnection = null;

public static Connection getConnection() {
    if (dbConnection != null) {
        return dbConnection;
    } else {
        try {
            InputStream inputStream = DbUtil.class.getClassLoader()
                    .getResourceAsStream("db.properties");
            Properties properties = new Properties();
            if (properties != null) {
                properties.load(inputStream);

                String dbDriver = properties.getProperty("dbDriver");
                String connectionUrl = properties
                        .getProperty("connectionUrl");
                String userName = properties.getProperty("userName");
                String password = properties.getProperty("password");

                Class.forName(dbDriver).newInstance();
                dbConnection = DriverManager.getConnection(connectionUrl,
                        userName, password);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return dbConnection;
    }
}
</code></pre>

<p>}
```</p>

<h2>9. Create class for Repository tier</h2>

<p>Create a Repository tier POJO class named StudentRepository.java under the package com.github.elizabetht.repository to support the database operations of saving the student details, verifying the student login details and checking if the username exists when a save is attempted.</p>

<p>```
public class StudentRepository {</p>

<pre><code>private Connection dbConnection;

public StudentRepository() {
    dbConnection = DbUtil.getConnection();
}

public void save(String userName, String password, String firstName,
        String lastName, String dateOfBirth, String emailAddress) {
    if (dbConnection != null) {
        try {
            PreparedStatement prepStatement = dbConnection
                    .prepareStatement("insert into student(userName, password, firstName, lastName, dateOfBirth, emailAddress) values (?, ?, ?, ?, ?, ?)");
            prepStatement.setString(1, userName);
            prepStatement.setString(2, password);
            prepStatement.setString(3, firstName);
            prepStatement.setString(4, lastName);               

            prepStatement.setDate(5, new java.sql.Date(new SimpleDateFormat("MM/dd/yyyy")
            .parse(dateOfBirth.substring(0, 10)).getTime()));

            prepStatement.setString(6, emailAddress);

            prepStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ParseException e) {                
            e.printStackTrace();
        }
    }
}

public boolean findByUserName(String userName) {
    if (dbConnection != null) {
        try {
            PreparedStatement prepStatement = dbConnection
                    .prepareStatement("select count(*) from student where userName = ?");
            prepStatement.setString(1, userName);

            ResultSet result = prepStatement.executeQuery();
            if (result != null) {
                while (result.next()) {
                    if (result.getInt(1) == 1) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return false;
}

public boolean findByLogin(String userName, String password) {
    if (dbConnection != null) {
        try {
            PreparedStatement prepStatement = dbConnection
                    .prepareStatement("select password from student where userName = ?");
            prepStatement.setString(1, userName);

            ResultSet result = prepStatement.executeQuery();
            if (result != null) {
                while (result.next()) {
                    if (result.getString(1).equals(password)) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return false;
}
</code></pre>

<p>}
```</p>

<h2>10. Create class for Service Tier</h2>

<p>Create a Controller tier POJO class named StudentService.java inside the package com.github.elizabetht.service. This layer acts as a median between the Controller and Repository tier classes.</p>

<p>```
public class StudentService {</p>

<pre><code>private StudentRepository studentRepository;

public StudentService() {
    studentRepository = new StudentRepository();
}

public String save(String userName, String password,
        String firstName, String lastName, String dateOfBirth,
        String emailAddress) {
    if (studentRepository != null) {
        if (studentRepository.findByUserName(userName)) {
            return "SignupFailure-UserNameExists";
        }
        studentRepository.save(userName, password, firstName, lastName,
                dateOfBirth, emailAddress);
        return "SignupSuccess";
    } else {
        return "SignupFailure";
    }
}

public String findByLogin(String userName, String password) {
    String result = "LoginFailure";
    if (studentRepository != null) {
        boolean status = studentRepository.findByLogin(userName, password);
        if (status) {
            result = "LoginSuccess";
        }
    }
    return result;
}
</code></pre>

<p>}
```</p>

<h2>11. Create Action classes for Controller tier</h2>

<p>Create a Controller tier POJO class named StudentController.java inside the package com.github.elizabetht.controller. This is where the routing logic of the application goes &ndash; whether a signup or login action is called. For simplicity sake, two separate action classes are created for each of the operation.</p>

<p>Each of the Action class has to implement the execute() method. Based on the String result returned from the execute() method of the action class, the appropriate view page is rendered.</p>

<p>In most cases, the action class is extended from the general ActionSupport class, which has a lot of easy to use convenient features. So, extend the ActionSupport class in the Action class, unless you have a reason not to!</p>

<p>The following snippet shows the SignupAction class.
```
@SuppressWarnings(&ldquo;serial&rdquo;)
public class SignupAction extends ActionSupport {</p>

<pre><code>private String pageName;
private String userName;
private String password;
private String firstName;
private String lastName;
private String dateOfBirth;
private String emailAddress;

@Action("signup-input")
public String input() throws Exception {
    return "signup";
}

@Override
@Action(value = "signup", results = { @Result(name = "login-input", location = "login-input", type = "redirect") })
public String execute() throws Exception {
    String result = "";
    StudentService studentService = new StudentService();

    if (pageName != null &amp;&amp; studentService != null) {
        if (pageName.equals("signup")) {
            result = studentService.save(userName, password, firstName,
                    lastName, dateOfBirth, emailAddress);
            if (result.equals("SignupSuccess")) {
                return "login-input";
            } else {
                return "failure";
            }
        }
    }
    return SUCCESS;
}

public String getPageName() {
    return pageName;
}

public void setPageName(String pageName) {
    this.pageName = pageName;
}

public String getUserName() {
    return userName;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "UserName is a required field")
@StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "UserName must be of length between 6 and 12")
public void setUserName(String userName) {
    this.userName = userName;
}

public String getPassword() {
    return password;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "Password is a required field")
@StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "Password must be of length between 6 and 12")
public void setPassword(String password) {
    this.password = password;
}

public String getFirstName() {
    return firstName;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "FirstName is a required field")
public void setFirstName(String firstName) {
    this.firstName = firstName;
}

public String getLastName() {
    return lastName;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "LastName is a required field")
public void setLastName(String lastName) {
    this.lastName = lastName;
}

public String getEmailAddress() {
    return emailAddress;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "EmailAddress is a required field")
@EmailValidator(type = ValidatorType.FIELD, message = "Email Address must be valid")
public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
}

public String getDateOfBirth() {
    return dateOfBirth;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "DateOfBirth is a required field")
public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
}
</code></pre>

<p>}
```</p>

<p>Similar to the SignupAction class, the LoginAction class also implements the execute() method as shown below</p>

<p>```
@SuppressWarnings(&ldquo;serial&rdquo;)
public class LoginAction extends ActionSupport {</p>

<pre><code>private String pageName;
private String userName;
private String password;

@Action("login-input")
public String input() throws Exception {
    return "login";
}

@Action("login")
public String execute() throws Exception {
    String result = "";
    StudentService studentService = new StudentService();

    if (pageName != null &amp;&amp; studentService != null) {
        if (pageName.equals("login")) {
            result = studentService.findByLogin(userName, password);
            if (result.equals("LoginFailure")) {
                return "failure";
            } else {
                return "success";
            }
        }
    }
    return SUCCESS;
}

public String getPageName() {
    return pageName;
}

public void setPageName(String pageName) {
    this.pageName = pageName;
}

public String getUserName() {
    return userName;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "UserName is a required field")
@StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "UserName must be of length between 6 and 12")
public void setUserName(String userName) {
    this.userName = userName;
}

public String getPassword() {
    return password;
}

@RequiredStringValidator(type = ValidatorType.FIELD, message = "Password is a required field")
@StringLengthFieldValidator(type = ValidatorType.FIELD, maxLength = "12", minLength = "6", message = "Password must be of length between 6 and 12")
public void setPassword(String password) {
    this.password = password;
}
</code></pre>

<p>}
```</p>

<p>The @Action annotation is used to specify the incoming requested URL and results to be rendered. For results other than SUCCESS (or the equivalent success string), the resulting view will be rendered based on the value of the result. For instance, in SignupAction class, if &ldquo;failure&rdquo; string is returned from the execute() method, the result will be appended to the @Action value (which is &ldquo;signup&rdquo;, in this case) and the signup-failure.jsp page will be rendered. Similarly, in LoginAction class, if &ldquo;failure&rdquo; string is returned from the execute() method, the login-failure.jsp page will be rendered.</p>

<p>If SUCCESS (or the equivalent success string) is returned from the execute() method, the actual value of action will be the resulting view, unless there are no results specified using the @Result annotation. For instance, in LoginAction class, there are no @Result annotations used and hence, login-success.jsp will be rendered when execute() method returns a SUCCESS string.</p>

<p>But if there are results specified with @Result annotation as in SignupAction class, the name and location given by the results array will determine the view rendered &ndash; in this case, login-input action will be rendered (which is in-turn, an action specified by the LoginAction class).</p>

<h2>12. Add Validators to the Form Fields</h2>

<p>As shown in the above snippets of SignupAction and LoginAction classes, add the following required validators to the setter methods for the fields.</p>

<p>@RequiredStringValidator is used to check that a String field is not empty.</p>

<p>@StringLengthFieldValidator is used to check that a String field is of the right length. It assumes that the field is a String. If neither minLength nor maxLength is set, nothing will be done.</p>

<p>@EmailValidator is used to check that a field is a valid e-mail address if it contains a non-empty String.</p>

<h2>13. Create the DB Schema in a MYSQL DB</h2>

<p>Connect to the MySQL DB which is to be used for this application and create a new DB Schema named studentEnrollment using the MySQL Workbench.
This is necessary as the DB Schema name of studentEnrollment is specified in the db.properties file.</p>

<p>Once the studentEnrollment DB Schema is created, create a table named student inside the DB Schema using the CREATE TABLE statement as follows:</p>

<p><code>
CREATE TABLE `student` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `dateOfBirth` datetime NOT NULL,
  `emailAddress` varchar(255) NOT NULL,
  `firstName` varchar(255) NOT NULL,
  `lastName` varchar(255) NOT NULL,
  `password` varchar(8) NOT NULL,
  `userName` varchar(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
</code></p>

<h2>14. Deploying the Application on Tomcat Server</h2>

<p>Once the above steps are complete and the project is successfully built, the Java web application is ready to deployed on the Tomcat Server 7.</p>

<p>The Java web application can be deployed locally by right clicking on the project and choosing the &ldquo;Run As->Run on Server&rdquo; option.</p>

<p>The same can be deployed remotely on any native server that supports Tomcat by copying the WAR file (Right click on the project and choose Export as WAR File option) to /var/lib/tomcat7 folder (or appropriate tomcat directory) and restarting the tomcat server.</p>

<p>This application is available for a demo here: <a href="http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithStruts">http://ec2-23-20-137-135.compute-1.amazonaws.com:8080/StudentEnrollmentWithStruts</a></p>

<h2>15. Clone or Download code</h2>

<p>If using git, clone a copy of this project here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts.git">https://github.com/elizabetht/StudentEnrollmentWithStruts.git</a></p>

<p>In case of not using git, download the project as ZIP or tar.gz file here: <a href="https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.4">https://github.com/elizabetht/StudentEnrollmentWithStruts/releases/tag/1.4</a></p>
]]></content>
  </entry>
  
</feed>
